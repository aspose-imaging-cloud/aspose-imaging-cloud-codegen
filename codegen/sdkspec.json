{
  "x-generator": "NSwag v12.0.14.0 (NJsonSchema v9.13.18.0 (Newtonsoft.Json v12.0.0.0))",
  "swagger": "2.0",
  "info": {
    "title": "Aspose.Imaging Cloud API Reference",
    "version": "3.0"
  },
  "host": "api-qa.aspose.cloud",
  "basePath": "/v3.0",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/imaging/{name}/bmp": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update parameters of existing BMP image.",
        "operationId": "GetImageBmp",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of image.",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "bitsPerPixel",
            "in": "query",
            "required": true,
            "description": "Color depth.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "horizontalResolution",
            "in": "query",
            "required": true,
            "description": "New horizontal resolution.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "verticalResolution",
            "in": "query",
            "required": true,
            "description": "New vertical resolution.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetImageBmp"
      }
    },
    "/imaging/bmp": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update parameters of BMP image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImageBmp",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "integer",
            "name": "bitsPerPixel",
            "in": "query",
            "required": true,
            "description": "Color depth.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "horizontalResolution",
            "in": "query",
            "required": true,
            "description": "New horizontal resolution.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "verticalResolution",
            "in": "query",
            "required": true,
            "description": "New vertical resolution.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostImageBmp"
      }
    },
    "/imaging/{name}/emf": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Process existing EMF imaging using given parameters.",
        "operationId": "GetImageEmf",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of image.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "bkColor",
            "in": "query",
            "required": true,
            "description": "Color of the background.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "pageWidth",
            "in": "query",
            "required": true,
            "description": "Width of the page.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "pageHeight",
            "in": "query",
            "required": true,
            "description": "Height of the page.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "borderX",
            "in": "query",
            "required": true,
            "description": "Border width.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "borderY",
            "in": "query",
            "required": true,
            "description": "Border height.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "description": "Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.",
            "default": "png",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetImageEmf"
      }
    },
    "/imaging/emf": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Process existing EMF imaging using given parameters. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImageEmf",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "bkColor",
            "in": "query",
            "required": true,
            "description": "Color of the background.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "pageWidth",
            "in": "query",
            "required": true,
            "description": "Width of the page.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "pageHeight",
            "in": "query",
            "required": true,
            "description": "Height of the page.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "borderX",
            "in": "query",
            "required": true,
            "description": "Border width.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "borderY",
            "in": "query",
            "required": true,
            "description": "Border height.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "description": "Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.",
            "default": "png",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostImageEmf"
      }
    },
    "/imaging/{name}/frames/{frameId}": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Get separate frame from existing TIFF image.",
        "operationId": "GetImageFrame",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of image.",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "frameId",
            "in": "path",
            "required": true,
            "description": "Number of a frame.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "newWidth",
            "in": "query",
            "description": "New width.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "newHeight",
            "in": "query",
            "description": "New height.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "x",
            "in": "query",
            "description": "X position of start point for cropping rectangle.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "y",
            "in": "query",
            "description": "Y position of start point for cropping rectangle.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "rectWidth",
            "in": "query",
            "description": "Width of cropping rectangle.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "rectHeight",
            "in": "query",
            "description": "Height of cropping rectangle.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "rotateFlipMethod",
            "in": "query",
            "description": "RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "saveOtherFrames",
            "in": "query",
            "description": "If result will include all other frames or just a specified frame.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetImageFrame"
      }
    },
    "/imaging/frames/{frameId}": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Get separate frame from existing TIFF image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImageFrame",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "integer",
            "name": "frameId",
            "in": "path",
            "required": true,
            "description": "Number of a frame.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "newWidth",
            "in": "query",
            "description": "New width.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "newHeight",
            "in": "query",
            "description": "New height.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "x",
            "in": "query",
            "description": "X position of start point for cropping rectangle.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "y",
            "in": "query",
            "description": "Y position of start point for cropping rectangle.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "rectWidth",
            "in": "query",
            "description": "Width of cropping rectangle.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "rectHeight",
            "in": "query",
            "description": "Height of cropping rectangle.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "rotateFlipMethod",
            "in": "query",
            "description": "RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "saveOtherFrames",
            "in": "query",
            "description": "If result will include all other frames or just a specified frame.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostImageFrame"
      }
    },
    "/imaging/{name}/frames/{frameId}/properties": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Get separate frame properties of existing TIFF image.",
        "operationId": "GetImageFrameProperties",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename with image.",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "frameId",
            "in": "path",
            "required": true,
            "description": "Number of a frame.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Information about a frame.",
            "schema": {
              "$ref": "#/definitions/ImagingResponse"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "GetImageFrameProperties"
      }
    },
    "/imaging/frames/{frameId}/properties": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Get separate frame properties of existing TIFF image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImageFrameProperties",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "integer",
            "name": "frameId",
            "in": "path",
            "required": true,
            "description": "Number of a frame.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Information about a frame.",
            "schema": {
              "$ref": "#/definitions/ImagingResponse"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "PostImageFrameProperties"
      }
    },
    "/imaging/{name}/gif": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update parameters of existing GIF image.",
        "operationId": "GetImageGif",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of image.",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "backgroundColorIndex",
            "in": "query",
            "description": "Index of the background color.",
            "format": "byte",
            "default": 32,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "colorResolution",
            "in": "query",
            "description": "Color resolution.",
            "format": "byte",
            "default": 3,
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "hasTrailer",
            "in": "query",
            "description": "Specifies if image has trailer.",
            "default": true,
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "interlaced",
            "in": "query",
            "description": "Specifies if image is interlaced.",
            "default": true,
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "isPaletteSorted",
            "in": "query",
            "description": "Specifies if palette is sorted.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "pixelAspectRatio",
            "in": "query",
            "description": "Pixel aspect ratio.",
            "format": "byte",
            "default": 3,
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": true,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetImageGif"
      }
    },
    "/imaging/gif": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update parameters of GIF image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImageGif",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "integer",
            "name": "backgroundColorIndex",
            "in": "query",
            "description": "Index of the background color.",
            "format": "byte",
            "default": 32,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "colorResolution",
            "in": "query",
            "description": "Color resolution.",
            "format": "byte",
            "default": 3,
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "hasTrailer",
            "in": "query",
            "description": "Specifies if image has trailer.",
            "default": true,
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "interlaced",
            "in": "query",
            "description": "Specifies if image is interlaced.",
            "default": true,
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "isPaletteSorted",
            "in": "query",
            "description": "Specifies if palette is sorted.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "pixelAspectRatio",
            "in": "query",
            "description": "Pixel aspect ratio.",
            "format": "byte",
            "default": 3,
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": true,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostImageGif"
      }
    },
    "/imaging/{name}/jpg2000": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update parameters of existing JPEG2000 image.",
        "operationId": "GetImageJpeg2000",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of image.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "comment",
            "in": "query",
            "required": true,
            "description": "The comment (can be either single or comma-separated).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "codec",
            "in": "query",
            "description": "The codec (j2k or jp2).",
            "default": "j2k",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetImageJpeg2000"
      }
    },
    "/imaging/jpg2000": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update parameters of JPEG2000 image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImageJpeg2000",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "comment",
            "in": "query",
            "required": true,
            "description": "The comment (can be either single or comma-separated).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "codec",
            "in": "query",
            "description": "The codec (j2k or jp2).",
            "default": "j2k",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostImageJpeg2000"
      }
    },
    "/imaging/{name}/jpg": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update parameters of existing JPEG image.",
        "operationId": "GetImageJpg",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of image.",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "quality",
            "in": "query",
            "description": "Quality of an image from 0 to 100. Default is 75.",
            "format": "int32",
            "default": 75,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "compressionType",
            "in": "query",
            "description": "Compression type: baseline (default), progressive, lossless or jpegls.",
            "default": "baseline",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetImageJpg"
      }
    },
    "/imaging/jpg": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update parameters of JPEG image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImageJpg",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "integer",
            "name": "quality",
            "in": "query",
            "description": "Quality of an image from 0 to 100. Default is 75.",
            "format": "int32",
            "default": 75,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "compressionType",
            "in": "query",
            "description": "Compression type: baseline (default), progressive, lossless or jpegls.",
            "default": "baseline",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostImageJpg"
      }
    },
    "/imaging/{name}/psd": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update parameters of existing PSD image.",
        "operationId": "GetImagePsd",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of image.",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "channelsCount",
            "in": "query",
            "description": "Count of color channels.",
            "default": 4,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "compressionMethod",
            "in": "query",
            "description": "Compression method (for now, raw and RLE are supported).",
            "default": "rle",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetImagePsd"
      }
    },
    "/imaging/psd": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update parameters of PSD image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImagePsd",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "integer",
            "name": "channelsCount",
            "in": "query",
            "description": "Count of color channels.",
            "default": 4,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "compressionMethod",
            "in": "query",
            "description": "Compression method (for now, raw and RLE are supported).",
            "default": "rle",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostImagePsd"
      }
    },
    "/imaging/{name}/tiff": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update parameters of existing TIFF image.",
        "operationId": "GetImageTiff",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of image.",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "bitDepth",
            "in": "query",
            "required": true,
            "description": "Bit depth.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "compression",
            "in": "query",
            "description": "Compression (none is default). Please, refer to https://apireference.aspose.com/net/imaging/aspose.imaging.fileformats.tiff.enums/tiffcompressions for all possible values.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "resolutionUnit",
            "in": "query",
            "description": "New resolution unit (none - the default one, inch or centimeter).",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "horizontalResolution",
            "in": "query",
            "description": "New horizontal resolution.",
            "format": "double",
            "default": 0.0,
            "x-nullable": false
          },
          {
            "type": "number",
            "name": "verticalResolution",
            "in": "query",
            "description": "New verstical resolution.",
            "format": "double",
            "default": 0.0,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetImageTiff"
      }
    },
    "/imaging/tiff": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update parameters of TIFF image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImageTiff",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "integer",
            "name": "bitDepth",
            "in": "query",
            "required": true,
            "description": "Bit depth.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "compression",
            "in": "query",
            "description": "Compression (none is default). Please, refer to https://apireference.aspose.com/net/imaging/aspose.imaging.fileformats.tiff.enums/tiffcompressions for all possible values.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "resolutionUnit",
            "in": "query",
            "description": "New resolution unit (none - the default one, inch or centimeter).",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "horizontalResolution",
            "in": "query",
            "description": "New horizontal resolution.",
            "format": "double",
            "default": 0.0,
            "x-nullable": false
          },
          {
            "type": "number",
            "name": "verticalResolution",
            "in": "query",
            "description": "New verstical resolution.",
            "format": "double",
            "default": 0.0,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostImageTiff"
      }
    },
    "/imaging/tiff/{name}/toFax": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update parameters of existing TIFF image accordingly to fax parameters.",
        "operationId": "GetTiffToFax",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of image.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetTiffToFax"
      }
    },
    "/imaging/tiff/{name}/appendTiff": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Appends existing TIFF image to another existing TIFF image (i.e. merges TIFF images).",
        "operationId": "PostTiffAppend",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Original image file name.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "appendFile",
            "in": "query",
            "required": true,
            "description": "Image file name to be appended to original one.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with images to process.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Result is saved to storage."
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "PostTiffAppend"
      }
    },
    "/imaging/{name}/webp": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update parameters of existing WEBP image.",
        "operationId": "GetImageWebP",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of image.",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "lossLess",
            "in": "query",
            "required": true,
            "description": "If WEBP should be in lossless format.",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "quality",
            "in": "query",
            "required": true,
            "description": "Quality (0-100).",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "animLoopCount",
            "in": "query",
            "required": true,
            "description": "The animation loop count.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "animBackgroundColor",
            "in": "query",
            "required": true,
            "description": "Color of the animation background.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetImageWebP"
      }
    },
    "/imaging/webp": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update parameters of WEBP image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImageWebP",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "boolean",
            "name": "lossLess",
            "in": "query",
            "required": true,
            "description": "If WEBP should be in lossless format.",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "quality",
            "in": "query",
            "required": true,
            "description": "Quality (0-100).",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "animLoopCount",
            "in": "query",
            "required": true,
            "description": "The animation loop count.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "animBackgroundColor",
            "in": "query",
            "required": true,
            "description": "Color of the animation background.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostImageWebP"
      }
    },
    "/imaging/{name}/wmf": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Process existing WMF image using given parameters.",
        "operationId": "GetImageWmf",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of image.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "bkColor",
            "in": "query",
            "required": true,
            "description": "Color of the background.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "pageWidth",
            "in": "query",
            "required": true,
            "description": "Width of the page.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "pageHeight",
            "in": "query",
            "required": true,
            "description": "Height of the page.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "borderX",
            "in": "query",
            "required": true,
            "description": "Border width.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "borderY",
            "in": "query",
            "required": true,
            "description": "Border height.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "description": "Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.",
            "default": "png",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetImageWmf"
      }
    },
    "/imaging/wmf": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Process existing WMF image using given parameters. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImageWmf",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "bkColor",
            "in": "query",
            "required": true,
            "description": "Color of the background.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "pageWidth",
            "in": "query",
            "required": true,
            "description": "Width of the page.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "pageHeight",
            "in": "query",
            "required": true,
            "description": "Height of the page.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "borderX",
            "in": "query",
            "required": true,
            "description": "Border width.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "borderY",
            "in": "query",
            "required": true,
            "description": "Border height.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "fromScratch",
            "in": "query",
            "description": "Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "description": "Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.",
            "default": "png",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostImageWmf"
      }
    },
    "/imaging/{name}/saveAs": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Export existing image to another format.",
        "operationId": "GetImageSaveAs",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of image.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "required": true,
            "description": "Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetImageSaveAs"
      }
    },
    "/imaging/saveAs": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Export existing image to another format. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.\n            ",
        "operationId": "PostImageSaveAs",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "required": true,
            "description": "Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostImageSaveAs"
      }
    },
    "/imaging/{name}/crop": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Crop an existing image.",
        "operationId": "GetImageCrop",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of an image.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "required": true,
            "description": "Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "x",
            "in": "query",
            "required": true,
            "description": "X position of start point for cropping rectangle.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "y",
            "in": "query",
            "required": true,
            "description": "Y position of start point for cropping rectangle.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "width",
            "in": "query",
            "required": true,
            "description": "Width of cropping rectangle",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "height",
            "in": "query",
            "required": true,
            "description": "Height of cropping rectangle.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetImageCrop"
      }
    },
    "/imaging/crop": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Crop an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImageCrop",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "required": true,
            "description": "Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "x",
            "in": "query",
            "required": true,
            "description": "X position of start point for cropping rectangle.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "y",
            "in": "query",
            "required": true,
            "description": "Y position of start point for cropping rectangle.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "width",
            "in": "query",
            "required": true,
            "description": "Width of cropping rectangle.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "height",
            "in": "query",
            "required": true,
            "description": "Height of cropping rectangle.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostImageCrop"
      }
    },
    "/imaging/{name}/properties": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Get properties of an image.",
        "operationId": "GetImageProperties",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of an image.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Information about an image.",
            "schema": {
              "$ref": "#/definitions/ImagingResponse"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "GetImageProperties"
      }
    },
    "/imaging/properties": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Get properties of an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImageProperties",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Information about an image.",
            "schema": {
              "$ref": "#/definitions/ImagingResponse"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "PostImageProperties"
      }
    },
    "/imaging/{name}/resize": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Resize an existing image.",
        "operationId": "GetImageResize",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of an image.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "required": true,
            "description": "Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "newWidth",
            "in": "query",
            "required": true,
            "description": "New width.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "newHeight",
            "in": "query",
            "required": true,
            "description": "New height.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetImageResize"
      }
    },
    "/imaging/resize": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Resize an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImageResize",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "required": true,
            "description": "Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "newWidth",
            "in": "query",
            "required": true,
            "description": "New width.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "newHeight",
            "in": "query",
            "required": true,
            "description": "New height.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostImageResize"
      }
    },
    "/imaging/{name}/rotateflip": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Rotate and/or flip an existing image.",
        "operationId": "GetImageRotateFlip",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of an image.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "required": true,
            "description": "Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "method",
            "in": "query",
            "required": true,
            "description": "RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetImageRotateFlip"
      }
    },
    "/imaging/rotateflip": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Rotate and/or flip an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImageRotateFlip",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "required": true,
            "description": "Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "method",
            "in": "query",
            "required": true,
            "description": "RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostImageRotateFlip"
      }
    },
    "/imaging/{name}/updateImage": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Perform scaling, cropping and flipping of an existing image in a single request.",
        "operationId": "GetImageUpdate",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Filename of an image.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "required": true,
            "description": "Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "newWidth",
            "in": "query",
            "required": true,
            "description": "New width of the scaled image.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "newHeight",
            "in": "query",
            "required": true,
            "description": "New height of the scaled image.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "x",
            "in": "query",
            "required": true,
            "description": "X position of start point for cropping rectangle.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "y",
            "in": "query",
            "required": true,
            "description": "Y position of start point for cropping rectangle.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "rectWidth",
            "in": "query",
            "required": true,
            "description": "Width of cropping rectangle.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "rectHeight",
            "in": "query",
            "required": true,
            "description": "Height of cropping rectangle.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "rotateFlipMethod",
            "in": "query",
            "required": true,
            "description": "RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder with image to process.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetImageUpdate"
      }
    },
    "/imaging/updateImage": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Perform scaling, cropping and flipping of an image in a single request. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostImageUpdate",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "required": true,
            "description": "Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "newWidth",
            "in": "query",
            "required": true,
            "description": "New width of the scaled image.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "newHeight",
            "in": "query",
            "required": true,
            "description": "New height of the scaled image.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "x",
            "in": "query",
            "required": true,
            "description": "X position of start point for cropping rectangle.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "y",
            "in": "query",
            "required": true,
            "description": "Y position of start point for cropping rectangle.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "rectWidth",
            "in": "query",
            "required": true,
            "description": "Width of cropping rectangle.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "rectHeight",
            "in": "query",
            "required": true,
            "description": "Height of cropping rectangle.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "rotateFlipMethod",
            "in": "query",
            "required": true,
            "description": "RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "outPath",
            "in": "query",
            "description": "Path to updated file (if this is empty, response contains streamed image).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Your Aspose Cloud Storage name.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream (if output path is not set).",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostImageUpdate"
      }
    },
    "/imaging/ai/imageSearch/create": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Create new search context.",
        "operationId": "PostCreateSearchContext",
        "parameters": [
          {
            "type": "string",
            "name": "detector",
            "in": "query",
            "description": "The image features detector.",
            "default": "akaze",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "matchingAlgorithm",
            "in": "query",
            "description": "The matching algorithm.",
            "default": "randomBinaryTree",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "The folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The storage.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Search Context status.",
            "schema": {
              "$ref": "#/definitions/SearchContextStatus"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "PostCreateSearchContext"
      }
    },
    "/imaging/ai/imageSearch/{searchContextId}/status": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Gets the search context status.",
        "operationId": "GetSearchContextStatus",
        "parameters": [
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "The search context identifier.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "The folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The storage.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Search Context status.",
            "schema": {
              "$ref": "#/definitions/SearchContextStatus"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "GetSearchContextStatus"
      }
    },
    "/imaging/ai/imageSearch/{searchContextId}": {
      "delete": {
        "tags": [
          "Imaging"
        ],
        "summary": "Deletes the search context.",
        "operationId": "DeleteSearchContext",
        "parameters": [
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "The search context identifier.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "The folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The storage.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response status."
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "DeleteSearchContext"
      }
    },
    "/imaging/ai/imageSearch/{searchContextId}/image2features": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Extract features from image without adding to search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "GetSearchContextExtractImageFeatures",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "The search context identifier.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "imageId",
            "in": "query",
            "required": true,
            "description": "The image identifier.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "The folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The storage.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Image features.",
            "schema": {
              "$ref": "#/definitions/ImageFeatures"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "GetSearchContextExtractImageFeatures"
      }
    },
    "/imaging/ai/imageSearch/{searchContextId}/compare": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Compare two images. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostSearchContextCompareImages",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "The search context identifier.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "imageId1",
            "in": "query",
            "required": true,
            "description": "The first image Id in storage.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "imageId2",
            "in": "query",
            "description": "The second image Idin storage or null(if image loading in request).",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "The folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The storage.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Search results.",
            "schema": {
              "$ref": "#/definitions/SearchResultsSet"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "PostSearchContextCompareImages"
      }
    },
    "/imaging/ai/imageSearch/{searchContextId}/findSimilar": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Find similar images. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "GetSearchContextFindSimilar",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "The search context identifier.",
            "x-nullable": false
          },
          {
            "type": "number",
            "name": "similarityThreshold",
            "in": "query",
            "required": true,
            "description": "The similarity threshold.",
            "format": "double",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "maxCount",
            "in": "query",
            "required": true,
            "description": "The maximum count.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "imageId",
            "in": "query",
            "description": "The search image identifier.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "The folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The storage.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Search results.",
            "schema": {
              "$ref": "#/definitions/SearchResultsSet"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "GetSearchContextFindSimilar"
      }
    },
    "/imaging/ai/imageSearch/{searchContextId}/findDuplicates": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Find images duplicates.",
        "operationId": "GetSearchContextFindDuplicates",
        "parameters": [
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "The search context identifier.",
            "x-nullable": false
          },
          {
            "type": "number",
            "name": "similarityThreshold",
            "in": "query",
            "required": true,
            "description": "The similarity threshold.",
            "format": "double",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "The folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The storage.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Search duplicates results.",
            "schema": {
              "$ref": "#/definitions/ImageDuplicatesSet"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "GetSearchContextFindDuplicates"
      }
    },
    "/imaging/ai/imageSearch/{searchContextId}/findByTags": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Find images by tags. Tags JSON string is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostSearchContextFindByTags",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "tags",
            "in": "formData",
            "required": true,
            "description": "Tags array for searching"
          },
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "The search context identifier.",
            "x-nullable": false
          },
          {
            "type": "number",
            "name": "similarityThreshold",
            "in": "query",
            "required": true,
            "description": "The similarity threshold.",
            "format": "double",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "maxCount",
            "in": "query",
            "required": true,
            "description": "The maximum count.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "The folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The storage.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Search results.",
            "schema": {
              "$ref": "#/definitions/SearchResultsSet"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "PostSearchContextFindByTags"
      }
    },
    "/imaging/ai/imageSearch/{searchContextId}/addTag": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Add tag and reference image to search context. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostSearchContextAddTag",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "required": true,
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "The search context identifier.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "tagName",
            "in": "query",
            "required": true,
            "description": "The tag.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "The folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The storage.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response status."
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostSearchContextAddTag"
      }
    },
    "/imaging/ai/imageSearch/{searchContextId}/features": {
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Extract images features and add them to search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostSearchContextExtractImageFeatures",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "The search context identifier.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "imageId",
            "in": "query",
            "description": "The image identifier.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "imagesFolder",
            "in": "query",
            "description": "Images folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "The folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The storage.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response status."
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostSearchContextExtractImageFeatures"
      },
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Gets image features from search context.",
        "operationId": "GetSearchContextImageFeatures",
        "parameters": [
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "The search context identifier.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "imageId",
            "in": "query",
            "required": true,
            "description": "The image identifier.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "The folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The storage.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Image features.",
            "schema": {
              "$ref": "#/definitions/ImageFeatures"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "GetSearchContextImageFeatures"
      },
      "delete": {
        "tags": [
          "Imaging"
        ],
        "summary": "Deletes image features from search context.",
        "operationId": "DeleteSearchContextImageFeatures",
        "parameters": [
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "The search context identifier.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "imageId",
            "in": "query",
            "required": true,
            "description": "The image identifier.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "The folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The storage.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response status."
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "DeleteSearchContextImageFeatures"
      },
      "put": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update images features in search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PutSearchContextImageFeatures",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "The search context identifier.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "imageId",
            "in": "query",
            "required": true,
            "description": "The image identifier.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "The folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The storage.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response status."
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PutSearchContextImageFeatures"
      }
    },
    "/imaging/ai/imageSearch/{searchContextId}/image": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Get image from search context",
        "operationId": "GetSearchContextImage",
        "parameters": [
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "Search context identifier.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "imageId",
            "in": "query",
            "required": true,
            "description": "Image identifier.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Storage",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Data stream.",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "GetSearchContextImage"
      },
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Add image and images features to search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PostSearchContextAddImage",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "Search context identifier.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "imageId",
            "in": "query",
            "required": true,
            "description": "Image identifier.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Storage",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response status."
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PostSearchContextAddImage"
      },
      "delete": {
        "tags": [
          "Imaging"
        ],
        "summary": "Delete image and images features from search context",
        "operationId": "DeleteSearchContextImage",
        "parameters": [
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "Search context identifier.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "imageId",
            "in": "query",
            "required": true,
            "description": "Image identifier.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Storage",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response status."
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "DeleteSearchContextImage"
      },
      "put": {
        "tags": [
          "Imaging"
        ],
        "summary": "Update image and images features in search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.",
        "operationId": "PutSearchContextImage",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageData",
            "in": "formData",
            "description": "Input image"
          },
          {
            "type": "string",
            "name": "searchContextId",
            "in": "path",
            "required": true,
            "description": "Search context identifier.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "imageId",
            "in": "query",
            "required": true,
            "description": "Image identifier.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Storage",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response status."
          },
          "401": {
            "description": "Authentication failed."
          },
          "400": {
            "description": "Invalid request parameters or input data."
          },
          "501": {
            "description": "The specific operation is not yet supported - please, contact us if you require it."
          },
          "500": {
            "description": "Either current server is busy or internal error occured."
          },
          "404": {
            "description": "Input file doesn't exist at provided path."
          },
          "405": {
            "description": "Operation Failed. It is not allowed due to given restrictions."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": "true",
        "x-operationId": "PutSearchContextImage"
      }
    },
    "/imaging/storage/file/{path}": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Download file",
        "operationId": "DownloadFile",
        "produces": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "File path e.g. '/folder/file.ext'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "versionId",
            "in": "query",
            "description": "File version ID to download",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The raw data of the file.",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          },
          "404": {
            "description": "File for given path not found."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "DownloadFile",
        "x-binary-result": true
      },
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Upload file",
        "operationId": "UploadFile",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext\n            If the content is multipart and path does not contains the file name it tries to get them from filename parameter\n            from Content-Disposition header.\n            ",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          },
          {
            "type": "file",
            "name": "File",
            "in": "formData",
            "required": true,
            "description": "File to upload"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Empty error list if the upload is successful.",
            "schema": {
              "$ref": "#/definitions/FilesUploadResult"
            }
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "UploadFile"
      },
      "delete": {
        "tags": [
          "Imaging"
        ],
        "summary": "Delete file",
        "operationId": "DeleteFile",
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "File path e.g. '/folder/file.ext'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "versionId",
            "in": "query",
            "description": "File version ID to delete",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if the delete is successful."
          },
          "401": {
            "description": "Authorization token is invalid or expired"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "DeleteFile"
      }
    },
    "/imaging/storage/file/copy/{srcPath}": {
      "put": {
        "tags": [
          "Imaging"
        ],
        "summary": "Copy file",
        "operationId": "CopyFile",
        "parameters": [
          {
            "type": "string",
            "name": "srcPath",
            "in": "path",
            "required": true,
            "description": "Source file path e.g. '/folder/file.ext'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "destPath",
            "in": "query",
            "required": true,
            "description": "Destination file path",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "srcStorageName",
            "in": "query",
            "description": "Source storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "destStorageName",
            "in": "query",
            "description": "Destination storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "versionId",
            "in": "query",
            "description": "File version ID to copy",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if the copy is successful."
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "CopyFile"
      }
    },
    "/imaging/storage/file/move/{srcPath}": {
      "put": {
        "tags": [
          "Imaging"
        ],
        "summary": "Move file",
        "operationId": "MoveFile",
        "parameters": [
          {
            "type": "string",
            "name": "srcPath",
            "in": "path",
            "required": true,
            "description": "Source file path e.g. '/src.ext'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "destPath",
            "in": "query",
            "required": true,
            "description": "Destination file path e.g. '/dest.ext'",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "srcStorageName",
            "in": "query",
            "description": "Source storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "destStorageName",
            "in": "query",
            "description": "Destination storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "versionId",
            "in": "query",
            "description": "File version ID to move",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if the move is successful."
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          },
          "404": {
            "description": "File for given path not found."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "MoveFile"
      }
    },
    "/imaging/storage/folder/{path}": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Get all files and folders within a folder",
        "operationId": "GetFilesList",
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "Folder path e.g. '/folder'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Returns all files and folders contained by the folder.",
            "schema": {
              "$ref": "#/definitions/FilesList"
            }
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          },
          "404": {
            "description": "Can't find folder for given path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "GetFilesList"
      },
      "post": {
        "tags": [
          "Imaging"
        ],
        "summary": "Create the folder",
        "operationId": "CreateFolder",
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "Folder path to create e.g. 'folder_1/folder_2/'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if the create is successful."
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          },
          "400": {
            "description": "Storage not found or it is not associated with the application."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "CreateFolder"
      },
      "delete": {
        "tags": [
          "Imaging"
        ],
        "summary": "Delete folder",
        "operationId": "DeleteFolder",
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "Folder path e.g. '/folder'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "recursive",
            "in": "query",
            "description": "Enable to delete folders, subfolders and files",
            "default": false,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if the delete is successful."
          },
          "401": {
            "description": "Authorization token is invalid or expired"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "DeleteFolder"
      }
    },
    "/imaging/storage/folder/copy/{srcPath}": {
      "put": {
        "tags": [
          "Imaging"
        ],
        "summary": "Copy folder",
        "operationId": "CopyFolder",
        "parameters": [
          {
            "type": "string",
            "name": "srcPath",
            "in": "path",
            "required": true,
            "description": "Source folder path e.g. '/src'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "destPath",
            "in": "query",
            "required": true,
            "description": "Destination folder path e.g. '/dst'",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "srcStorageName",
            "in": "query",
            "description": "Source storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "destStorageName",
            "in": "query",
            "description": "Destination storage name",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if the copy is successful."
          },
          "401": {
            "description": "Authorization token is invalid or expired"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "CopyFolder"
      }
    },
    "/imaging/storage/folder/move/{srcPath}": {
      "put": {
        "tags": [
          "Imaging"
        ],
        "summary": "Move folder",
        "operationId": "MoveFolder",
        "parameters": [
          {
            "type": "string",
            "name": "srcPath",
            "in": "path",
            "required": true,
            "description": "Folder path to move e.g. '/folder'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "destPath",
            "in": "query",
            "required": true,
            "description": "Destination folder path to move to e.g '/dst'",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "srcStorageName",
            "in": "query",
            "description": "Source storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "destStorageName",
            "in": "query",
            "description": "Destination storage name",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if the move is successful."
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "MoveFolder"
      }
    },
    "/imaging/storage/{storageName}/exist": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Check if storage exists",
        "operationId": "StorageExists",
        "parameters": [
          {
            "type": "string",
            "name": "storageName",
            "in": "path",
            "required": true,
            "description": "Storage name",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Storage exist result.",
            "schema": {
              "$ref": "#/definitions/StorageExist"
            }
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "StorageExists"
      }
    },
    "/imaging/storage/exist/{path}": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Check if file or folder exists",
        "operationId": "ObjectExists",
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "File or folder path e.g. '/file.ext' or '/folder'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "versionId",
            "in": "query",
            "description": "File version ID",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Object exist result.",
            "schema": {
              "$ref": "#/definitions/ObjectExist"
            }
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "ObjectExists"
      }
    },
    "/imaging/storage/disc": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Get disc usage",
        "operationId": "GetDiscUsage",
        "parameters": [
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Disc usage.",
            "schema": {
              "$ref": "#/definitions/DiscUsage"
            }
          },
          "400": {
            "description": "Storage not found or it is not associated with an application."
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "GetDiscUsage"
      }
    },
    "/imaging/storage/version/{path}": {
      "get": {
        "tags": [
          "Imaging"
        ],
        "summary": "Get file versions",
        "operationId": "GetFileVersions",
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "File path e.g. '/file.ext'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "File versions.",
            "schema": {
              "$ref": "#/definitions/FileVersions"
            }
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-operationId": "GetFileVersions"
      }
    }
  },
  "definitions": {
    "ImagingResponse": {
      "type": "object",
      "description": "Represents information about image.",
      "additionalProperties": false,
      "required": [
        "Height",
        "Width",
        "BitsPerPixel",
        "HorizontalResolution",
        "VerticalResolution",
        "IsCached"
      ],
      "properties": {
        "Height": {
          "type": "integer",
          "description": "Gets or sets the height of image.",
          "format": "int32"
        },
        "Width": {
          "type": "integer",
          "description": "Gets or sets the width of image.",
          "format": "int32"
        },
        "BitsPerPixel": {
          "type": "integer",
          "description": "Gets or sets the bits per pixel for image.",
          "format": "int32"
        },
        "BmpProperties": {
          "description": "Gets or sets the BMP properties.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/BmpProperties"
        },
        "GifProperties": {
          "description": "Gets or sets the GIF properties.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/GifProperties"
        },
        "JpegProperties": {
          "description": "Gets or sets the JPEG properties.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/JpegProperties"
        },
        "PngProperties": {
          "description": "Gets or sets the PNG properties.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/PngProperties"
        },
        "TiffProperties": {
          "description": "Gets or sets the TIFF properties.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/TiffProperties"
        },
        "PsdProperties": {
          "description": "Gets or sets the PSD properties.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/PsdProperties"
        },
        "DjvuProperties": {
          "description": "Gets or sets the DJVU properties.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/DjvuProperties"
        },
        "WebPProperties": {
          "description": "Gets or sets the WEBP properties.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/WebPProperties"
        },
        "Jpeg2000Properties": {
          "description": "Gets or sets the JPEG2000 properties.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/Jpeg2000Properties"
        },
        "DicomProperties": {
          "description": "Gets or sets the DICOM properties.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/DicomProperties"
        },
        "DngProperties": {
          "description": "Gets or sets the DNG properties.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/DngProperties"
        },
        "OdgProperties": {
          "description": "Gets or sets the the ODG properties.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/OdgProperties"
        },
        "HorizontalResolution": {
          "type": "number",
          "description": "Gets or sets the horizontal resolution of an image.",
          "format": "double"
        },
        "VerticalResolution": {
          "type": "number",
          "description": "Gets or sets the vertical resolution of an image.",
          "format": "double"
        },
        "IsCached": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether image is cached."
        }
      }
    },
    "BmpProperties": {
      "type": "object",
      "description": "Represents information about image in bmp format.",
      "additionalProperties": false,
      "properties": {
        "Compression": {
          "type": "string",
          "description": "Gets or sets compression of bitmap."
        }
      }
    },
    "GifProperties": {
      "type": "object",
      "description": "Represents information about image in GIF format.",
      "additionalProperties": false,
      "required": [
        "HasBackgroundColor",
        "HasTrailer",
        "PixelAspectRatio"
      ],
      "properties": {
        "BackgroundColor": {
          "type": "string",
          "description": "Gets or sets the background color."
        },
        "HasBackgroundColor": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether background color is used."
        },
        "HasTrailer": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether image has trailer."
        },
        "PixelAspectRatio": {
          "type": "integer",
          "description": "Gets or sets the pixel aspect ratio.",
          "format": "byte"
        }
      }
    },
    "JpegProperties": {
      "type": "object",
      "description": "Represents information about image in JPEG format.",
      "additionalProperties": false,
      "properties": {
        "Comment": {
          "type": "string",
          "description": "Gets or sets the comment."
        },
        "JpegExifData": {
          "description": "Gets or sets the JPEG EXIF data.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/JpegExifData"
        },
        "JpegJfifData": {
          "description": "Gets or sets the JPEG JFIF data.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/JfifData"
        }
      }
    },
    "JpegExifData": {
      "type": "object",
      "description": "Represents EXIF data for JPEG",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/ExifData"
        },
        {
          "type": "object",
          "description": "Represents EXIF data for JPEG",
          "additionalProperties": false,
          "required": [
            "XResolution",
            "YResolution"
          ],
          "properties": {
            "Artist": {
              "type": "string",
              "description": "Gets or sets the artist."
            },
            "Copyright": {
              "type": "string",
              "description": "Gets or sets the copyright info."
            },
            "DateTime": {
              "type": "string",
              "description": "Gets or sets the date and time."
            },
            "ImageDescription": {
              "type": "string",
              "description": "Gets or sets the image description."
            },
            "Make": {
              "type": "string",
              "description": "Gets or sets the manufacturer."
            },
            "Model": {
              "type": "string",
              "description": "Gets or sets the model."
            },
            "Orientation": {
              "type": "string",
              "description": "Gets or sets the orientation."
            },
            "PrimaryChromaticities": {
              "type": "array",
              "description": "Gets or sets the primary chromaticities.",
              "items": {
                "type": "number",
                "format": "double"
              }
            },
            "ReferenceBlackWhite": {
              "type": "array",
              "description": "Gets or sets the reference black and white.",
              "items": {
                "type": "number",
                "format": "double"
              }
            },
            "ResolutionUnit": {
              "type": "string",
              "description": "Gets or sets the resolution unit."
            },
            "Software": {
              "type": "string",
              "description": "Gets or sets the software."
            },
            "TransferFunction": {
              "type": "array",
              "description": "Gets or sets the transfer function.",
              "items": {
                "type": "integer"
              }
            },
            "XResolution": {
              "type": "number",
              "description": "Gets or sets the X resolution.",
              "format": "double"
            },
            "YCbCrCoefficients": {
              "type": "array",
              "description": "Gets or sets the YCbCr coefficients.",
              "items": {
                "type": "number",
                "format": "double"
              }
            },
            "YCbCrPositioning": {
              "type": "string",
              "description": "Gets or sets the YCbCr positioning."
            },
            "YResolution": {
              "type": "number",
              "description": "Gets or sets the Y resolution.",
              "format": "double"
            }
          }
        }
      ]
    },
    "ExifData": {
      "type": "object",
      "discriminator": "Type",
      "description": "Represents common EXIF data section.",
      "additionalProperties": false,
      "required": [
        "ApertureValue",
        "BrightnessValue",
        "CompressedBitsPerPixel",
        "DigitalZoomRatio",
        "ExposureBiasValue",
        "ExposureIndex",
        "ExposureTime",
        "FNumber",
        "FlashEnergy",
        "FocalLength",
        "FocalLengthIn35MmFilm",
        "FocalPlaneXResolution",
        "FocalPlaneYResolution",
        "GPSAltitude",
        "GPSDOP",
        "GPSDestBearing",
        "GPSDestDistance",
        "GPSDifferential",
        "GPSImgDirection",
        "GPSSpeed",
        "Gamma",
        "ISOSpeed",
        "ISOSpeedLatitudeYYY",
        "ISOSpeedLatitudeZZZ",
        "PhotographicSensitivity",
        "MaxApertureValue",
        "PixelXDimension",
        "PixelYDimension",
        "RecommendedExposureIndex",
        "SceneType",
        "SensitivityType",
        "Sharpness",
        "ShutterSpeedValue",
        "StandardOutputSensitivity",
        "SubjectDistance"
      ],
      "properties": {
        "ApertureValue": {
          "type": "number",
          "description": "Gets or sets the aperture.",
          "format": "double"
        },
        "BodySerialNumber": {
          "type": "string",
          "description": "Gets or sets the body serial number."
        },
        "BrightnessValue": {
          "type": "number",
          "description": "Gets or sets the brightness.",
          "format": "double"
        },
        "CFAPattern": {
          "type": "string",
          "description": "Gets or sets the CFA pattern.",
          "format": "byte"
        },
        "CameraOwnerName": {
          "type": "string",
          "description": "Gets or sets the camera owner name."
        },
        "ColorSpace": {
          "type": "string",
          "description": "Gets or sets the color space."
        },
        "ComponentsConfiguration": {
          "type": "string",
          "description": "Gets or sets the components configuration.",
          "format": "byte"
        },
        "CompressedBitsPerPixel": {
          "type": "number",
          "description": "Gets or sets the compressed bits per pixel.",
          "format": "double"
        },
        "Contrast": {
          "type": "string",
          "description": "Gets or sets the contrast."
        },
        "CustomRendered": {
          "type": "string",
          "description": "Gets or sets the value indincating if custom rendering is performed."
        },
        "DateTimeDigitized": {
          "type": "string",
          "description": "Gets or sets date and time when image was digitized."
        },
        "DateTimeOriginal": {
          "type": "string",
          "description": "Gets or sets date and time of the original image."
        },
        "DeviceSettingDescription": {
          "type": "string",
          "description": "Gets or sets the device setting description.",
          "format": "byte"
        },
        "DigitalZoomRatio": {
          "type": "number",
          "description": "Gets or sets the digital zoom ratio.",
          "format": "double"
        },
        "ExifVersion": {
          "type": "string",
          "description": "Gets or sets EXIF version.",
          "format": "byte"
        },
        "ExposureBiasValue": {
          "type": "number",
          "description": "Gets or sets the exposure bias.",
          "format": "double"
        },
        "ExposureIndex": {
          "type": "number",
          "description": "Gets or sets the exposure index.",
          "format": "double"
        },
        "ExposureMode": {
          "type": "string",
          "description": "Gets or sets the exposure mode."
        },
        "ExposureProgram": {
          "type": "string",
          "description": "Gets or sets the exposure program."
        },
        "ExposureTime": {
          "type": "number",
          "description": "Gets or sets the exposure time.",
          "format": "double"
        },
        "FNumber": {
          "type": "number",
          "description": "Gets or sets the focal number.",
          "format": "double"
        },
        "FileSource": {
          "type": "string",
          "description": "Gets or sets the file source."
        },
        "Flash": {
          "type": "string",
          "description": "Gets or sets the flash."
        },
        "FlashEnergy": {
          "type": "number",
          "description": "Gets or sets the flash energy.",
          "format": "double"
        },
        "FlashpixVersion": {
          "type": "string",
          "description": "Gets or sets the Flashpix version.",
          "format": "byte"
        },
        "FocalLength": {
          "type": "number",
          "description": "Gets or sets the focal length.",
          "format": "double"
        },
        "FocalLengthIn35MmFilm": {
          "type": "integer",
          "description": "Gets or sets the focal length in 35mm film."
        },
        "FocalPlaneResolutionUnit": {
          "type": "string",
          "description": "Gets or sets the focal plane resolution unit."
        },
        "FocalPlaneXResolution": {
          "type": "number",
          "description": "Gets or sets the focal plane X resolution.",
          "format": "double"
        },
        "FocalPlaneYResolution": {
          "type": "number",
          "description": "Gets or sets the focal plane Y resolution.",
          "format": "double"
        },
        "GPSAltitude": {
          "type": "number",
          "description": "Gets or sets the GPS altitude.",
          "format": "double"
        },
        "GPSAltitudeRef": {
          "type": "string",
          "description": "Gets or sets the GPS altitude reference (if it's above or below sea level)."
        },
        "GPSAreaInformation": {
          "type": "string",
          "description": "Gets or sets the GPS area information.",
          "format": "byte"
        },
        "GPSDOP": {
          "type": "number",
          "description": "Gets or sets the GPS DOP (data degree of precision).",
          "format": "double"
        },
        "GPSDestBearing": {
          "type": "number",
          "description": "Gets or sets the GPS bearing of the destination.",
          "format": "double"
        },
        "GPSDestBearingRef": {
          "type": "string",
          "description": "Gets or sets the GPS reference unit for bearing of the destination."
        },
        "GPSDestDistance": {
          "type": "number",
          "description": "Gets or sets the GPS destination distance.",
          "format": "double"
        },
        "GPSDestDistanceRef": {
          "type": "string",
          "description": "Gets or sets the GPS reference unit for destination distance."
        },
        "GPSDestLatitude": {
          "type": "array",
          "description": "Gets or sets the GPS destination latitude.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "GPSDestLatitudeRef": {
          "type": "string",
          "description": "Gets or sets the GPS reference destination latitude (north or south)."
        },
        "GPSDestLongitude": {
          "type": "array",
          "description": "Gets or sets the GPS destination longtitude.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "GPSDestLongitudeRef": {
          "type": "string",
          "description": "Gets or sets the GPS reference destination longtitude (east or west)."
        },
        "GPSDifferential": {
          "type": "integer",
          "description": "Gets or sets the GPS differential."
        },
        "GPSImgDirection": {
          "type": "number",
          "description": "Gets or sets the GPS image direction.",
          "format": "double"
        },
        "GPSImgDirectionRef": {
          "type": "string",
          "description": "Gets or sets the GPS reference image direction."
        },
        "GPSDateStamp": {
          "type": "string",
          "description": "Gets or sets the GPS date stamp."
        },
        "GPSLatitude": {
          "type": "array",
          "description": "Gets or sets the GPS latitude.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "GPSLatitudeRef": {
          "type": "string",
          "description": "Gets or sets the GPS latitude reference (north or south)."
        },
        "GPSLongitude": {
          "type": "array",
          "description": "Gets or sets the GPS longitude.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "GPSLongitudeRef": {
          "type": "string",
          "description": "Gets or sets the GPS longitude reference (east or west)."
        },
        "GPSMapDatum": {
          "type": "string",
          "description": "Gets or sets the geodetic survey data used by the GPS receiver."
        },
        "GPSMeasureMode": {
          "type": "string",
          "description": "Gets or sets the GPS measure mode."
        },
        "GPSProcessingMethod": {
          "type": "string",
          "description": "Gets or setsthe GPS processing method.",
          "format": "byte"
        },
        "GPSSatellites": {
          "type": "string",
          "description": "Gets or sets the GPS satellites info."
        },
        "GPSSpeed": {
          "type": "number",
          "description": "Gets or sets the GPS speed.",
          "format": "double"
        },
        "GPSSpeedRef": {
          "type": "string",
          "description": "Gets or sets the GPS speed reference unit."
        },
        "GPSStatus": {
          "type": "string",
          "description": "Gets or sets the GPS status."
        },
        "GPSTimestamp": {
          "type": "array",
          "description": "Gets or sets the GPS times tamp.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "GPSTrack": {
          "type": "string",
          "description": "Gets or sets the GPS track."
        },
        "GPSTrackRef": {
          "type": "string",
          "description": "Gets or sets the GPS track reference."
        },
        "GPSVersionID": {
          "type": "string",
          "description": "Gets or sets the GPS version ID.",
          "format": "byte"
        },
        "GainControl": {
          "type": "string",
          "description": "Gets or sets the gain control."
        },
        "Gamma": {
          "type": "number",
          "description": "Gets or sets the gamma.",
          "format": "double"
        },
        "ISOSpeed": {
          "type": "integer",
          "description": "Gets or sets the ISO speed.",
          "format": "int64"
        },
        "ISOSpeedLatitudeYYY": {
          "type": "integer",
          "description": "Gets or sets the ISO speed latitude YYY value.",
          "format": "int64"
        },
        "ISOSpeedLatitudeZZZ": {
          "type": "integer",
          "description": "Gets or sets the ISO speed latitude ZZZ value.",
          "format": "int64"
        },
        "PhotographicSensitivity": {
          "type": "integer",
          "description": "Gets or sets the photographic sensitivity.",
          "format": "int64"
        },
        "ImageUniqueID": {
          "type": "string",
          "description": "Gets or sets the image unique ID."
        },
        "LensMake": {
          "type": "string",
          "description": "Gets or sets the lens manufacturer."
        },
        "LensModel": {
          "type": "string",
          "description": "Gets or sets the lens model."
        },
        "LensSerialNumber": {
          "type": "string",
          "description": "Gets or sets the lens serial number."
        },
        "LensSpecification": {
          "type": "array",
          "description": "Gets or sets the lens specification.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "LightSource": {
          "type": "string",
          "description": "Gets or sets the light source."
        },
        "MakerNoteRawData": {
          "type": "string",
          "description": "Gets or sets the maker note raw data.",
          "format": "byte"
        },
        "MaxApertureValue": {
          "type": "number",
          "description": "Gets or sets the max aperture.",
          "format": "double"
        },
        "MeteringMode": {
          "type": "string",
          "description": "Gets or sets the metering mode."
        },
        "OECF": {
          "type": "string",
          "description": "Gets or sets the OECF (Opto-Electric Conversion Function).",
          "format": "byte"
        },
        "PixelXDimension": {
          "type": "integer",
          "description": "Gets or sets the pixel X dimension.",
          "format": "int64"
        },
        "PixelYDimension": {
          "type": "integer",
          "description": "Gets or sets the pixel Y dimension.",
          "format": "int64"
        },
        "RecommendedExposureIndex": {
          "type": "integer",
          "description": "Gets or sets the recommended exposure index.",
          "format": "int64"
        },
        "RelatedSoundFile": {
          "type": "string",
          "description": "Gets or sets the related sound file."
        },
        "Saturation": {
          "type": "string",
          "description": "Gets or sets the saturation."
        },
        "SceneCaptureType": {
          "type": "string",
          "description": "Gets or sets the scene capture type."
        },
        "SceneType": {
          "type": "integer",
          "description": "Gets or sets the scene type.",
          "format": "byte"
        },
        "SensingMethod": {
          "type": "string",
          "description": "Gets or sets the sensing method."
        },
        "SensitivityType": {
          "type": "integer",
          "description": "Gets or sets the sensitivity type."
        },
        "Sharpness": {
          "type": "integer",
          "description": "Gets or sets the sharpness."
        },
        "ShutterSpeedValue": {
          "type": "number",
          "description": "Gets or sets the shutter speed.",
          "format": "double"
        },
        "SpatialFrequencyResponse": {
          "type": "string",
          "description": "Gets or sets the spatial frequency response.",
          "format": "byte"
        },
        "SpectralSensitivity": {
          "type": "string",
          "description": "Gets or sets the spectral sensitivity."
        },
        "StandardOutputSensitivity": {
          "type": "integer",
          "description": "Gets or sets the standard output sensitivity.",
          "format": "int64"
        },
        "SubjectArea": {
          "type": "array",
          "description": "Gets or sets the subject area.",
          "items": {
            "type": "integer"
          }
        },
        "SubjectDistance": {
          "type": "number",
          "description": "Gets or sets the subject distance.",
          "format": "double"
        },
        "SubjectDistanceRange": {
          "type": "string",
          "description": "Gets or sets the subject distance range."
        },
        "SubjectLocation": {
          "type": "array",
          "description": "Gets or sets the subject location.",
          "items": {
            "type": "integer"
          }
        },
        "SubsecTime": {
          "type": "string",
          "description": "Gets or sets the fractions of seconds for the DateTime tag."
        },
        "SubsecTimeDigitized": {
          "type": "string",
          "description": "Gets or sets the fractions of seconds for the DateTimeDigitized tag."
        },
        "SubsecTimeOriginal": {
          "type": "string",
          "description": "Gets or sets the fractions of seconds for the DateTimeOriginal tag."
        },
        "UserComment": {
          "type": "string",
          "description": "Gets or sets the user comment."
        },
        "WhiteBalance": {
          "type": "string",
          "description": "Gets or sets the white balance."
        },
        "WhitePoint": {
          "type": "array",
          "description": "Gets or sets the white point.",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "JfifData": {
      "type": "object",
      "description": "Represents JFIF data.",
      "additionalProperties": false,
      "required": [
        "Version",
        "XDensity",
        "YDensity"
      ],
      "properties": {
        "DensityUnits": {
          "type": "string",
          "description": "Gets or sets the density units."
        },
        "Version": {
          "type": "integer",
          "description": "Gets or sets the version."
        },
        "XDensity": {
          "type": "integer",
          "description": "Gets or sets the X density."
        },
        "YDensity": {
          "type": "integer",
          "description": "Gets or sets the Y density."
        }
      }
    },
    "PngProperties": {
      "type": "object",
      "description": "Represents information about image in PNG format.",
      "additionalProperties": false
    },
    "TiffProperties": {
      "type": "object",
      "description": "Represents properties of TIFF image.",
      "additionalProperties": false,
      "properties": {
        "Frames": {
          "type": "array",
          "description": "Frames information.",
          "items": {
            "$ref": "#/definitions/TiffFrame"
          }
        },
        "ByteOrder": {
          "type": "string",
          "description": "Gets or sets the byte order."
        },
        "ExifData": {
          "description": "Gets or sets the EXIF data.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/ExifData"
        }
      }
    },
    "TiffFrame": {
      "type": "object",
      "description": "Represents information about TIFF frame.",
      "additionalProperties": false,
      "required": [
        "Height",
        "Width"
      ],
      "properties": {
        "FrameOptions": {
          "description": "Gets or sets options for the frame.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/TiffOptions"
        },
        "Height": {
          "type": "integer",
          "description": "Gets or sets the frame height.",
          "format": "int32"
        },
        "Width": {
          "type": "integer",
          "description": "Gets or sets the frame width.",
          "format": "int32"
        },
        "ExifData": {
          "description": "Gets or sets the EXIF data.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/ExifData"
        }
      }
    },
    "TiffOptions": {
      "type": "object",
      "description": "Represents options for TIFF frame.",
      "additionalProperties": false,
      "required": [
        "IsValid",
        "RowsPerStrip",
        "SamplesPerPixel",
        "TotalPages",
        "Xposition",
        "Xresolution",
        "Yposition",
        "Yresolution",
        "ImageLength",
        "ImageWidth",
        "ValidTagCount",
        "BitsPerPixel"
      ],
      "properties": {
        "IsValid": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether TIFF image has valid data."
        },
        "Artist": {
          "type": "string",
          "description": "Gets or sets the artist."
        },
        "ByteOrder": {
          "type": "string",
          "description": "Gets or sets the byte order."
        },
        "BitsPerSample": {
          "type": "array",
          "description": "Gets or sets the bits per sample.",
          "items": {
            "type": "integer"
          }
        },
        "Compression": {
          "type": "string",
          "description": "Gets or sets the compression."
        },
        "Copyright": {
          "type": "string",
          "description": "Gets or sets the copyright info."
        },
        "ColorMap": {
          "type": "array",
          "description": "Gets or sets the color map.",
          "items": {
            "type": "integer"
          }
        },
        "DateTime": {
          "type": "string",
          "description": "Gets or sets the date and time."
        },
        "DocumentName": {
          "type": "string",
          "description": "Gets or sets the document name."
        },
        "AlphaStorage": {
          "type": "string",
          "description": "Gets or sets the alpha storage."
        },
        "FillOrder": {
          "type": "string",
          "description": "Gets or sets the fill order."
        },
        "HalfToneHints": {
          "type": "array",
          "description": "Gets or sets the half-tone hints.",
          "items": {
            "type": "integer"
          }
        },
        "ImageDescription": {
          "type": "string",
          "description": "Gets or sets the image description."
        },
        "InkNames": {
          "type": "string",
          "description": "Gets or sets the ink names."
        },
        "ScannerManufacturer": {
          "type": "string",
          "description": "Gets or sets the scanner manufacturer."
        },
        "MaxSampleValue": {
          "type": "array",
          "description": "Gets or sets the max sample value.",
          "items": {
            "type": "integer"
          }
        },
        "MinSampleValue": {
          "type": "array",
          "description": "Gets or sets the min sample value.",
          "items": {
            "type": "integer"
          }
        },
        "ScannerModel": {
          "type": "string",
          "description": "Gets or sets the scanner model."
        },
        "PageName": {
          "type": "string",
          "description": "Gets or sets the page name."
        },
        "Orientation": {
          "type": "string",
          "description": "Gets or sets the orientation."
        },
        "PageNumber": {
          "type": "array",
          "description": "Gets or sets the page number.",
          "items": {
            "type": "integer"
          }
        },
        "Photometric": {
          "type": "string",
          "description": "Gets or sets the photometric interpretation."
        },
        "PlanarConfiguration": {
          "type": "string",
          "description": "Gets or sets the planar configuration."
        },
        "ResolutionUnit": {
          "type": "string",
          "description": "Gets or sets the resolution unit."
        },
        "RowsPerStrip": {
          "type": "integer",
          "description": "Gets or sets the rows per strip.",
          "format": "int64"
        },
        "SampleFormat": {
          "type": "array",
          "description": "Gets or sets the sample format.",
          "items": {
            "type": "string"
          }
        },
        "SamplesPerPixel": {
          "type": "integer",
          "description": "Gets or sets the samples per pixel."
        },
        "SmaxSampleValue": {
          "type": "array",
          "description": "Gets or sets the Smax sample value.",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "SminSampleValue": {
          "type": "array",
          "description": "Gets or sets the Smin sample value.",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "SoftwareType": {
          "type": "string",
          "description": "Gets or sets the software type."
        },
        "StripByteCounts": {
          "type": "array",
          "description": "Gets or sets the strip byte counts.",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "StripOffsets": {
          "type": "array",
          "description": "Gets or sets the strip offsets.",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "SubFileType": {
          "type": "string",
          "description": "Gets or sets the subfile type."
        },
        "TargetPrinter": {
          "type": "string",
          "description": "Gets or sets the target printer."
        },
        "Threshholding": {
          "type": "string",
          "description": "Gets or sets the threshholding."
        },
        "TotalPages": {
          "type": "integer",
          "description": "Gets or sets the total pages count."
        },
        "Xposition": {
          "type": "number",
          "description": "Gets or sets the X position.",
          "format": "double"
        },
        "Xresolution": {
          "type": "number",
          "description": "Gets or sets the X resolution.",
          "format": "double"
        },
        "Yposition": {
          "type": "number",
          "description": "Gets or sets the Y position.",
          "format": "double"
        },
        "Yresolution": {
          "type": "number",
          "description": "Gets or sets the Y resolution.",
          "format": "double"
        },
        "FaxT4Options": {
          "type": "string",
          "description": "Gets or sets the FaxT4 Options."
        },
        "Predictor": {
          "type": "string",
          "description": "Gets or sets the predictor (a mathematical operator that is applied to the image data before an encoding scheme is applied)."
        },
        "ImageLength": {
          "type": "integer",
          "description": "Gets or sets the image length.",
          "format": "int64"
        },
        "ImageWidth": {
          "type": "integer",
          "description": "Gets or sets the image width.",
          "format": "int64"
        },
        "ValidTagCount": {
          "type": "integer",
          "description": "Gets or sets the valid tag count.",
          "format": "int32"
        },
        "BitsPerPixel": {
          "type": "integer",
          "description": "Gets or sets the bits per pixel.",
          "format": "int32"
        }
      }
    },
    "PsdProperties": {
      "type": "object",
      "description": "Represents information about PSD image",
      "additionalProperties": false,
      "required": [
        "BitsPerChannel",
        "ChannelsCount"
      ],
      "properties": {
        "BitsPerChannel": {
          "type": "integer",
          "description": "Gets or sets the bits per channel.",
          "format": "int32"
        },
        "ChannelsCount": {
          "type": "integer",
          "description": "Gets or sets the channels count.",
          "format": "int32"
        },
        "ColorMode": {
          "type": "string",
          "description": "Gets or sets the color mode."
        },
        "Compression": {
          "type": "string",
          "description": "Gets or sets the compression."
        }
      }
    },
    "DjvuProperties": {
      "type": "object",
      "description": "Represents properties of djvu file.",
      "additionalProperties": false,
      "required": [
        "HasBackgroundColor",
        "PagesCount"
      ],
      "properties": {
        "BackgroundColor": {
          "type": "string",
          "description": "Gets or sets background color."
        },
        "HasBackgroundColor": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether background color is used."
        },
        "PagesCount": {
          "type": "integer",
          "description": "Gets or sets pages count.",
          "format": "int32"
        }
      }
    },
    "WebPProperties": {
      "type": "object",
      "description": "Represents information about image in WEBP format.",
      "additionalProperties": false,
      "required": [
        "Lossless",
        "Quality",
        "AnimLoopCount",
        "AnimBackgroundColor"
      ],
      "properties": {
        "Lossless": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether these WebPOptions is lossless."
        },
        "Quality": {
          "type": "number",
          "description": "Gets or sets the quality.",
          "format": "double"
        },
        "AnimLoopCount": {
          "type": "integer",
          "description": "Gets or sets the animation loop count."
        },
        "AnimBackgroundColor": {
          "type": "integer",
          "description": "Gets or sets the color of the animation background.",
          "format": "int64"
        }
      }
    },
    "Jpeg2000Properties": {
      "type": "object",
      "description": "Represents information about image in JPEG2000 format.",
      "additionalProperties": false,
      "properties": {
        "Comments": {
          "type": "array",
          "description": "Gets or sets the JPEG comment markers.",
          "items": {
            "type": "string"
          }
        },
        "Codec": {
          "type": "string",
          "description": "Gets or sets the JPEG2000 codec"
        }
      }
    },
    "DicomProperties": {
      "type": "object",
      "description": "Represents information about image in dicom format.",
      "additionalProperties": false,
      "required": [
        "PlanarConfiguration",
        "SignedImage",
        "SamplesPerPixel",
        "BitsAllocated",
        "WidthTagFound",
        "HeightTagFound",
        "Width",
        "Height",
        "WindowCentre",
        "WindowWidth",
        "PixelRepresentation",
        "RescaleIntercept",
        "RescaleSlope",
        "NumberOfFrames",
        "LengthValue",
        "IsLittleEndian",
        "Offset",
        "DicomFound"
      ],
      "properties": {
        "PlanarConfiguration": {
          "type": "integer",
          "description": "Gets or sets the planar configuration.",
          "format": "int32"
        },
        "Reds": {
          "type": "string",
          "description": "Gets or sets the array of red colors.",
          "format": "byte"
        },
        "Greens": {
          "type": "string",
          "description": "Gets or sets the array of green colors.",
          "format": "byte"
        },
        "Blues": {
          "type": "string",
          "description": "Gets or sets the array of blue colors.",
          "format": "byte"
        },
        "DicomHeaderInfoByBytes": {
          "type": "string",
          "description": "Gets or sets the header information by bytes.",
          "format": "byte"
        },
        "SignedImage": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether it's a signed image."
        },
        "DicomInfo": {
          "type": "array",
          "description": "Gets or sets the header information of the DICOM file.",
          "items": {
            "type": "string"
          }
        },
        "SamplesPerPixel": {
          "type": "integer",
          "description": "Gets or sets samples per pixel count.",
          "format": "int32"
        },
        "BitsAllocated": {
          "type": "integer",
          "description": "Gets or sets allocated bits count.",
          "format": "int32"
        },
        "PhotoInterpretation": {
          "type": "string",
          "description": "Gets or sets the photo interpretation."
        },
        "WidthTagFound": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether width tag found."
        },
        "HeightTagFound": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether height tag found."
        },
        "Width": {
          "type": "integer",
          "description": "Gets or sets the width.",
          "format": "int32"
        },
        "Height": {
          "type": "integer",
          "description": "Gets or sets the height.",
          "format": "int32"
        },
        "WindowCentre": {
          "type": "number",
          "description": "Gets or sets the window centre.",
          "format": "double"
        },
        "WindowWidth": {
          "type": "number",
          "description": "Gets or sets the width of the window.",
          "format": "double"
        },
        "PixelRepresentation": {
          "type": "integer",
          "description": "Gets or sets data representation of the pixel samples.",
          "format": "int32"
        },
        "RescaleIntercept": {
          "type": "number",
          "description": "Gets or sets a value of the rescale intercept.",
          "format": "double"
        },
        "RescaleSlope": {
          "type": "number",
          "description": "Gets or sets a value of the rescale slope.",
          "format": "double"
        },
        "NumberOfFrames": {
          "type": "integer",
          "description": "Gets or sets the number of frames.",
          "format": "int32"
        },
        "LengthValue": {
          "type": "integer",
          "description": "Gets or sets the length of element.",
          "format": "int32"
        },
        "IsLittleEndian": {
          "type": "boolean",
          "description": "Indicates if DICOM image has little endian byte order."
        },
        "Offset": {
          "type": "integer",
          "description": "Gets or sets the offset.",
          "format": "int32"
        },
        "DicomFound": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether \"DICOM\" data is found."
        }
      }
    },
    "DngProperties": {
      "type": "object",
      "description": "Represents information about image in DNG format.",
      "additionalProperties": false,
      "required": [
        "DngVersion",
        "IsFoveon",
        "RawCount",
        "Filters",
        "ColorsCount"
      ],
      "properties": {
        "DngVersion": {
          "type": "integer",
          "description": "Gets or sets the DNG version.",
          "format": "int64"
        },
        "Description": {
          "type": "string",
          "description": "Gets or sets the description of colors (RGBG, RGBE, GMCY or GBTG)."
        },
        "Model": {
          "type": "string",
          "description": "Gets or sets the camera model."
        },
        "CameraManufacturer": {
          "type": "string",
          "description": "Gets or sets the camera manufacturer."
        },
        "IsFoveon": {
          "type": "integer",
          "description": "Gets or sets the value indicating whether it's a Foveon matrix.",
          "format": "int64"
        },
        "Software": {
          "type": "string",
          "description": "Gets or sets the software."
        },
        "RawCount": {
          "type": "integer",
          "description": "Gets or sets the number of RAW images in file (0 means that the file has not been recognized).",
          "format": "int64"
        },
        "Filters": {
          "type": "integer",
          "description": "Gets or sets the bit mask describing the order of color pixels in the matrix.",
          "format": "int64"
        },
        "ColorsCount": {
          "type": "integer",
          "description": "Gets or sets the colors count.",
          "format": "int32"
        },
        "XmpData": {
          "type": "string",
          "description": "Gets or sets the XMP data."
        },
        "TranslationCfaDng": {
          "type": "array",
          "description": "Gets or sets the translation array for CFA mosaic of DNG format.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "OdgProperties": {
      "type": "object",
      "description": "ODG format specific properties",
      "additionalProperties": false,
      "required": [
        "PageCount"
      ],
      "properties": {
        "PageCount": {
          "type": "integer",
          "description": "Gets or sets the page count.",
          "format": "int32"
        },
        "Metadata": {
          "description": "Gets or sets the metadata.",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/OdgMetadata"
        },
        "Pages": {
          "type": "array",
          "description": "Gets or sets the pages.",
          "items": {
            "$ref": "#/definitions/OdgPage"
          }
        }
      }
    },
    "OdgMetadata": {
      "type": "object",
      "description": "ODG format metadata",
      "additionalProperties": false,
      "properties": {
        "Generator": {
          "type": "string",
          "description": "Gets or sets the generator."
        },
        "Title": {
          "type": "string",
          "description": "Gets or sets the title."
        },
        "Description": {
          "type": "string",
          "description": "Gets or sets the description."
        },
        "Subject": {
          "type": "string",
          "description": "Gets or sets the subject."
        },
        "Keywords": {
          "type": "string",
          "description": "Gets or sets the keywords."
        },
        "InitialCreator": {
          "type": "string",
          "description": "Gets or sets the initial creator."
        },
        "Creator": {
          "type": "string",
          "description": "Gets or sets the creator."
        },
        "PrintedBy": {
          "type": "string",
          "description": "Gets or sets the \"PrintedBy\" record."
        },
        "CreationDateTime": {
          "type": "string",
          "description": "Gets or sets the creation date and time."
        },
        "ModificationDateTime": {
          "type": "string",
          "description": "Gets or sets the modification date and time."
        },
        "PrintDateTime": {
          "type": "string",
          "description": "Gets or sets the print date and time."
        },
        "DocumentTemplate": {
          "type": "string",
          "description": "Gets or sets the document template."
        },
        "AutomaticReload": {
          "type": "string",
          "description": "Gets or sets the automatic reload."
        },
        "HyperlinkBehavior": {
          "type": "string",
          "description": "Gets or sets the hyperlink behavior."
        },
        "Language": {
          "type": "string",
          "description": "Gets or sets the language."
        },
        "EditingCycles": {
          "type": "string",
          "description": "Gets or sets the editing cycles."
        },
        "EditingDuration": {
          "type": "string",
          "description": "Gets or sets the duration of the editing."
        },
        "DocumentStatistics": {
          "type": "string",
          "description": "Gets or sets the document statistics."
        }
      }
    },
    "OdgPage": {
      "type": "object",
      "description": "ODG page info",
      "additionalProperties": false,
      "required": [
        "Width",
        "Height"
      ],
      "properties": {
        "Width": {
          "type": "integer",
          "description": "Gets or sets the width.",
          "format": "int32"
        },
        "Height": {
          "type": "integer",
          "description": "Gets or sets the height.",
          "format": "int32"
        }
      }
    },
    "SearchContextStatus": {
      "type": "object",
      "description": "Search context status.",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "string",
          "description": "Gets or sets the identifier."
        },
        "SearchStatus": {
          "type": "string",
          "description": "Gets or sets the status."
        }
      }
    },
    "ImageFeatures": {
      "type": "object",
      "description": "Image features.",
      "additionalProperties": false,
      "required": [
        "FeaturesCount",
        "FeatureLengthInBits"
      ],
      "properties": {
        "ImageId": {
          "type": "string",
          "description": "Gets the image identifier."
        },
        "FeaturesCount": {
          "type": "integer",
          "description": "Gets the features count.",
          "format": "int32"
        },
        "FeatureLengthInBits": {
          "type": "integer",
          "description": "Gets the feature length in bits.",
          "format": "int32"
        },
        "Features": {
          "type": "string",
          "description": "Gets the features.",
          "format": "byte"
        }
      }
    },
    "SearchResultsSet": {
      "type": "object",
      "description": "Search results set.",
      "additionalProperties": false,
      "properties": {
        "Results": {
          "type": "array",
          "description": "Gets the results.",
          "items": {
            "$ref": "#/definitions/SearchResult"
          }
        }
      }
    },
    "SearchResult": {
      "type": "object",
      "description": "Image search result.",
      "additionalProperties": false,
      "required": [
        "Similarity"
      ],
      "properties": {
        "ImageId": {
          "type": "string",
          "description": "Gets or sets the image identifier."
        },
        "Similarity": {
          "type": "number",
          "description": "Gets or sets the similarity.",
          "format": "double"
        }
      }
    },
    "ImageDuplicatesSet": {
      "type": "object",
      "description": "Duplicate images set.\n ",
      "additionalProperties": false,
      "properties": {
        "Duplicates": {
          "type": "array",
          "description": "Gets the duplicate images.",
          "items": {
            "$ref": "#/definitions/ImageDuplicates"
          }
        }
      }
    },
    "ImageDuplicates": {
      "type": "object",
      "description": "Image duplicates.",
      "additionalProperties": false,
      "properties": {
        "DuplicateImages": {
          "type": "array",
          "description": "Gets or sets the duplicate images.",
          "items": {
            "$ref": "#/definitions/SearchResult"
          }
        }
      }
    },
    "FilesUploadResult": {
      "type": "object",
      "description": "File upload result",
      "additionalProperties": false,
      "properties": {
        "Uploaded": {
          "type": "array",
          "description": "List of uploaded file names",
          "items": {
            "type": "string"
          }
        },
        "Errors": {
          "type": "array",
          "description": "List of errors.",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "Error",
      "additionalProperties": false,
      "properties": {
        "Code": {
          "type": "string",
          "description": "Code\n            "
        },
        "Message": {
          "type": "string",
          "description": "Message\n            "
        },
        "Description": {
          "type": "string",
          "description": "Description\n            "
        },
        "InnerError": {
          "description": "Inner Error\n            ",
          "allOf": [
            {}
          ],
          "$ref": "#/definitions/ErrorDetails"
        }
      }
    },
    "ErrorDetails": {
      "type": "object",
      "description": "The error details",
      "additionalProperties": false,
      "required": [
        "Date"
      ],
      "properties": {
        "RequestId": {
          "type": "string",
          "description": "The request id"
        },
        "Date": {
          "type": "string",
          "description": "Date",
          "format": "date-time"
        }
      }
    },
    "FilesList": {
      "type": "object",
      "description": "Files list",
      "additionalProperties": false,
      "properties": {
        "Value": {
          "type": "array",
          "description": "Files and folders contained by folder StorageFile.",
          "items": {
            "$ref": "#/definitions/StorageFile"
          }
        }
      }
    },
    "StorageFile": {
      "type": "object",
      "discriminator": "Type",
      "description": "File or folder information",
      "additionalProperties": false,
      "required": [
        "IsFolder",
        "Size"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "File or folder name."
        },
        "IsFolder": {
          "type": "boolean",
          "description": "True if it is a folder."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "File or folder last modified DateTime.",
          "format": "date-time"
        },
        "Size": {
          "type": "integer",
          "description": "File or folder size.",
          "format": "int64"
        },
        "Path": {
          "type": "string",
          "description": "File or folder path."
        }
      }
    },
    "StorageExist": {
      "type": "object",
      "description": "Storage exists",
      "additionalProperties": false,
      "required": [
        "Exists"
      ],
      "properties": {
        "Exists": {
          "type": "boolean",
          "description": "Shows that the storage exists.\n            "
        }
      }
    },
    "ObjectExist": {
      "type": "object",
      "description": "Object exists",
      "additionalProperties": false,
      "required": [
        "Exists",
        "IsFolder"
      ],
      "properties": {
        "Exists": {
          "type": "boolean",
          "description": "Indicates that the file or folder exists."
        },
        "IsFolder": {
          "type": "boolean",
          "description": "True if it is a folder, false if it is a file."
        }
      }
    },
    "DiscUsage": {
      "type": "object",
      "description": "Class for disc space information.",
      "additionalProperties": false,
      "required": [
        "UsedSize",
        "TotalSize"
      ],
      "properties": {
        "UsedSize": {
          "type": "integer",
          "description": "Application used disc space.",
          "format": "int64"
        },
        "TotalSize": {
          "type": "integer",
          "description": "Total disc space.",
          "format": "int64"
        }
      }
    },
    "FileVersions": {
      "type": "object",
      "description": "File versions FileVersion.",
      "additionalProperties": false,
      "properties": {
        "Value": {
          "type": "array",
          "description": "File versions FileVersion.",
          "items": {
            "$ref": "#/definitions/FileVersion"
          }
        }
      }
    },
    "FileVersion": {
      "type": "object",
      "description": "File Version",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/StorageFile"
        },
        {
          "type": "object",
          "description": "File Version",
          "additionalProperties": false,
          "required": [
            "IsLatest"
          ],
          "properties": {
            "VersionId": {
              "type": "string",
              "description": "File Version ID."
            },
            "IsLatest": {
              "type": "boolean",
              "description": "Specifies whether the file is (true) or is not (false) the latest version of an file."
            }
          }
        }
      ]
    }
  },
  "securityDefinitions": {
    "JWT": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "https://api-qa.aspose.cloud/connect/token"
    }
  }
}