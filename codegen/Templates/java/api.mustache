{{>licenseInfo}}
package {{package}};

import {{modelPackage}}.*;
import {{invokerPackage}}.*;
import {{invokerPackage}}.internal.*;
import {{invokerPackage}}.internal.requesthandlers.*;
import {{modelPackage}}.requests.*;
import com.aspose.imaging.cloud.sdk.stablemodel.*;

{{^fullJavaUtil}}
import java.util.HashMap;
{{/fullJavaUtil}}

/**
 * Aspose.Imaging Cloud API
 */
public class {{classname}} 
{
    /**
     * Current SDK version
     */
    public static final String Version = "{{artifactVersion}}";

    /**
     * The configuration
     */
    public Configuration Configuration;
    
    /**
     * The API invoker
     */
    private ApiInvoker apiInvoker;
       
    /**
     * Initializes a new instance of the {{classname}} class for on-premise deployment service usage.
     *  @param baseUrl The base URL.
     */
    public {{classname}}(String baseUrl)
    {
        Configuration config = new Configuration();
        config.setApiBaseUrl(baseUrl);
        config.OnPremise = true;
        this.init{{classname}}(config);
    }

    /**
     * Initializes a new instance of the {{classname}} class for Aspose Cloud-hosted service usage.
     * @param appKey The app key.
     * @param appSid The app SID.
     */
    public {{classname}}(String appKey, String appSid)
    {
        Configuration config = new Configuration();
        config.AppKey = appKey;
        config.AppSid = appSid;
        this.init{{classname}}(config);
    }
    
    /**
     * Initializes a new instance of the {{classname}} class for on-premise deployment service usage.
     *  @param baseUrl The base URL.
     *  @param apiVersion API version.
     *  @param debug If debug mode is enabled.
     * @throws Exception 
     */
    public {{classname}}(String baseUrl, String apiVersion, Boolean debugMode) throws Exception
    {
        Configuration config = new Configuration();
        config.setApiBaseUrl(baseUrl);
        config.setApiVersion(apiVersion);
        config.setDebugMode(debugMode);
        config.OnPremise = true;
        this.init{{classname}}(config);
    }

    /**
     * Initializes a new instance of the {{classname}} class for Aspose Cloud-hosted service usage.
     * @param appKey The app key.
     * @param appSid The app SID.
     * @param baseUrl The base URL.
     */
    public {{classname}}(String appKey, String appSid, String baseUrl)
    {
        Configuration config = new Configuration();
        config.AppKey = appKey;
        config.AppSid = appSid;
        config.setApiBaseUrl(baseUrl);
        this.init{{classname}}(config);
    }

    /**
     * Initializes a new instance of the {{classname}} class for Aspose Cloud-hosted service usage.
     * @param appKey The app key.
     * @param appSid The app SID.
     * @param baseUrl The base URL.
     * @param apiVersion API version.
     */
    public {{classname}}(String appKey, String appSid, String baseUrl, String apiVersion) throws Exception
    {
        Configuration config = new Configuration();
        config.AppKey = appKey;
        config.AppSid = appSid;
        config.setApiBaseUrl(baseUrl);
        config.setApiVersion(apiVersion);
        this.init{{classname}}(config);
    }

    /**
     * Initializes a new instance of the {{classname}} class for Aspose Cloud-hosted service usage.
     * @param appKey The app key.
     * @param appSid The app SID.
     * @param baseUrl The base URL.
     * @param apiVersion API version.
     * @param debug If debug mode is enabled.
     */
    public {{classname}}(String appKey, String appSid, String baseUrl, String apiVersion, Boolean debug) throws Exception
    {
        Configuration config = new Configuration();
        config.AppKey = appKey;
        config.AppSid = appSid;
        config.setApiBaseUrl(baseUrl);
        config.setApiVersion(apiVersion);
        config.setDebugMode(debug);
        this.init{{classname}}(config);
    }
    
    /**
     * Initializes a new instance of the {{classname}} class.
     * @param configuration Configuration settings.
     */
    private void init{{classname}}(Configuration configuration)
    {
        this.Configuration = configuration;
        int handlersCount = configuration.OnPremise ? 2 : 3;
        IRequestHandler[] requestHandlers = new IRequestHandler[handlersCount];
        requestHandlers[--handlersCount] = new ApiExceptionRequestHandler();
        requestHandlers[--handlersCount] = new DebugLogRequestHandler(this.Configuration);
        if (!configuration.OnPremise)
        {
            requestHandlers[--handlersCount] = new AuthRequestHandler(this.Configuration);
        }
        
        this.apiInvoker = new ApiInvoker(requestHandlers, this.Configuration);
    }
    
    {{#operations}}
    {{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     * @param request Holds parameters for this request invocation.
     {{#returnType}}
     * @return {{#vendorExtensions}}{{#x-binary-result}}byte[]{{/x-binary-result}}{{^x-binary-result}}{{returnType}}{{/x-binary-result}}{{/vendorExtensions}}
     {{/returnType}}
     * @throws Exception 
     {{#isDeprecated}}
     * @deprecated
     {{/isDeprecated}}
     {{#externalDocs}}
     * {{description}}
     * @see <a href="{{url}}">{{summary}} Documentation</a>
     {{/externalDocs}}
     */
    {{#isDeprecated}}
    @Deprecated
    {{/isDeprecated}}
    public {{#returnType}}{{#vendorExtensions}}{{#x-binary-result}}byte[]{{/x-binary-result}}{{^x-binary-result}}{{returnType}}{{/x-binary-result}}{{/vendorExtensions}}{{/returnType}}{{^returnType}}void{{/returnType}} {{operationId}}({{vendorExtensions.x-operationId}}Request request) throws Exception 
    {
      {{#allParams}}{{#required}} // verify the required parameter 'request.{{paramName}}' is set
      if (request.{{baseName}}== null) {
        throw new ApiException(400, "Missing the required parameter 'request.{{paramName}}' when calling {{operationId}}");
      }
      {{/required}}{{/allParams}}// create path and map variables
      String resourcePath = this.Configuration.getApiRootUrl() + "{{path}}";
      {{#headerParams}}{{#-first}}HashMap<String,String> headerParams = new HashMap<String,String>();{{/-first}}{{/headerParams}}
      HashMap<String, Object> formParams = new HashMap<String, Object>();
      {{#pathParams}}resourcePath = UrlHelper.addPathParameter(resourcePath, "{{paramName}}", request.{{baseName}});
      {{/pathParams}}{{#queryParams}}
      resourcePath = UrlHelper.addQueryParameterToUrl(resourcePath, "{{paramName}}", request.{{baseName}});{{/queryParams}}
      {{#headerParams}}if (request.{{paramName}} != null) 
      {
          headerParams.Add("{{paramName}}", this.apiInvoker.toPathValue(request.{{baseName}})); // header parameter
      }{{/headerParams}}
      {{#hasBodyParam}}String postBody = null;
      if (request.{{bodyParam.baseName}} instanceof String)
      {
        postBody = request.{{bodyParam.baseName}}
      }
      else
      {
        postBody = SerializationHelper.serialize(request.{{bodyParam.baseName}})
      }{{/hasBodyParam}}
      {{#formParams}}if (request.{{baseName}} != null) 
      {
          {{#isFile}}formParams.put("{{paramName}}", this.apiInvoker.toFileInfo(request.{{baseName}}, "{{baseName}}"));{{/isFile}}{{^isFile}}formParams.put("{{baseName}}", request.{{baseName}});{{/isFile}}
      }{{/formParams}}
      {{#vendorExtensions}}
      {{#returnType}}byte[] response = {{/returnType}}this.apiInvoker.invokeApi(
          resourcePath, 
          "{{httpMethod}}", 
          {{#hasBodyParam}}postBody{{/hasBodyParam}}{{^hasBodyParam}}null{{/hasBodyParam}}, 
          {{#hasHeaderParams}}headerParams{{/hasHeaderParams}}{{^hasHeaderParams}}null{{/hasHeaderParams}}, 
          formParams);
          
      {{#returnType}}
      {{#x-binary-result}}return response;{{/x-binary-result}}
      {{^x-binary-result}}if (response == null)
      {
          return null;
      }
      
      return SerializationHelper.deserialize(new String(response), {{returnType}}.class);{{/x-binary-result}}
      {{/returnType}}
      {{/vendorExtensions}}
    }
  
    {{/operation}}
    {{/operations}}
}
{{>requestModel}}