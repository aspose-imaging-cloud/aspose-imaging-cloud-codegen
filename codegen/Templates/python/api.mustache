# coding: utf-8
# -----------------------------------------------------------------------------------
# <copyright company="Aspose" file="{{classname}}.py">
#   Copyright (c) 2019 Aspose Pty Ltd. All rights reserved.
# </copyright>
# <summary>
#   Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
# </summary>
# -----------------------------------------------------------------------------------
from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six
from asposeimagingcloud.rest import ApiException
from {{packageName}}.api_client import ApiClient


{{#operations}}
class {{classname}}(object):
    """
    Aspose.Images for Cloud API

    :param api_client: an api client to perfom http requests
    """
    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
{{#operation}}

    def {{operationId}}(self, request, **kwargs):  # noqa: E501
        """{{#summary}}{{.}}{{/summary}}{{^summary}}{{operationId}}{{/summary}}  # noqa: E501

{{#notes}}
        {{{notes}}}  # noqa: E501
{{/notes}}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True

        :param is_async bool
        :param request {{operationId}}_request object with parameters
        :return: {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}None{{/returnType}}
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        try:
            if kwargs.get('is_async'):
                return self.{{operationId}}_with_http_info(request, **kwargs)  # noqa: E501
            (data) = self.{{operationId}}_with_http_info(request, **kwargs)  # noqa: E501
            return data
        except ApiException as e:
            if e.status == 401:
                self.__request_token()
                if kwargs.get('is_async'):
                    return self.{{operationId}}_with_http_info(request, **kwargs)  # noqa: E501
            (data) = self.{{operationId}}_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def {{operationId}}_with_http_info(self, request, **kwargs):  # noqa: E501
        """{{#summary}}{{.}}{{/summary}}{{^summary}}{{operationId}}{{/summary}}  # noqa: E501

{{#notes}}
        {{{notes}}}  # noqa: E501
{{/notes}}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True

        :param is_async bool
        :param request {{operationId}}_request object with parameters
        :return: {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}None{{/returnType}}
                 If the method is called asynchronously,
                 returns the request thread.
        """

        params = locals()
        params['is_async'] = ''
        params['_return_http_data_only'] = False
        params['_preload_content'] = True
        params['_request_timeout'] = ''
        for key, val in six.iteritems(params['kwargs']):
            if key not in params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method {{operationId}}" % key
                )
            params[key] = val
        del params['kwargs']
{{#allParams}}
{{#required}}
        # verify the required parameter '{{paramName}}' is set
        if request.{{paramName}} is None:
            raise ValueError("Missing the required parameter `{{paramName}}` when calling `{{operationId}}`")  # noqa: E501
{{/required}}
{{/allParams}}

{{#allParams}}
{{#hasValidation}}
    {{#maxLength}}
        if request.{{paramName}} > {{maxLength}}:
            raise ValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, length must be less than or equal to `{{maxLength}}`")  # noqa: E501
    {{/maxLength}}
    {{#minLength}}
        if request.{{paramName}} < {{minLength}}:
            raise ValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, length must be greater than or equal to `{{minLength}}`")  # noqa: E501
    {{/minLength}}
    {{#maximum}}
        if request.{{paramName}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}:  # noqa: E501
            raise ValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, must be a value less than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}`{{maximum}}`")  # noqa: E501
    {{/maximum}}
    {{#minimum}}
        if request.{{paramName}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}:  # noqa: E501
            raise ValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, must be a value greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}`{{minimum}}`")  # noqa: E501
    {{/minimum}}
    {{#maxItems}}
        if request.{{paramName}} > {{maxItems}}:
            raise ValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, number of items must be less than or equal to `{{maxItems}}`")  # noqa: E501
    {{/maxItems}}
    {{#minItems}}
        if request.{{paramName}} < {{minItems}}:
            raise ValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, number of items must be greater than or equal to `{{minItems}}`")  # noqa: E501
    {{/minItems}}
{{/hasValidation}}
{{#-last}}
{{/-last}}
{{/allParams}}
        collection_formats = {}
        path = '{{{path}}}'
        path_params = {}
{{#pathParams}}
        if request.{{paramName}} is not None:
            path_params[self.__downcase_first_letter('{{baseName}}')] = request.{{paramName}}{{#isListContainer}}  # noqa: E501
            collection_formats[self.__downcase_first_letter('{{baseName}}')] = '{{collectionFormat}}'{{/isListContainer}}  # noqa: E501
{{/pathParams}}

        query_params = []
{{#queryParams}}
        if self.__downcase_first_letter('{{baseName}}') in path:
            path = path.replace('{' + self.__downcase_first_letter('{{baseName}}' + '}'), request.{{paramName}} if request.{{paramName}} is not None else '')
        else:
            if request.{{paramName}} is not None:
                query_params.append((self.__downcase_first_letter('{{baseName}}'), request.{{paramName}})){{#isListContainer}}  # noqa: E501
                collection_formats[self.__downcase_first_letter('{{baseName}}')] = '{{collectionFormat}}'{{/isListContainer}}  # noqa: E501
{{/queryParams}}

        header_params = {}
{{#headerParams}}
        if request.{{paramName}} is not None:
            header_params[self.__downcase_first_letter('{{baseName}}')] = request.{{paramName}}{{#isListContainer}}  # noqa: E501
            collection_formats[self.__downcase_first_letter('{{baseName}}')] = '{{collectionFormat}}'{{/isListContainer}}  # noqa: E501
{{/headerParams}}

        form_params = []
        local_var_files = []
{{#formParams}}
        if request.{{paramName}} is not None:
            {{#notFile}}form_params.append((self.__downcase_first_letter('{{baseName}}'), request.{{paramName}})){{/notFile}}{{#isFile}}local_var_files.append((self.__downcase_first_letter('{{baseName}}'), request.{{paramName}})){{/isFile}}{{#isListContainer}}  # noqa: E501
            collection_formats[self.__downcase_first_letter('{{baseName}}')] = '{{collectionFormat}}'{{/isListContainer}}  # noqa: E501
{{/formParams}}

        body_params = None
{{#bodyParam}}
        if request.{{paramName}} is not None:
            body_params = request.{{paramName}}
{{/bodyParam}}
        {{#hasProduces}}
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            [{{#produces}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/produces}}])  # noqa: E501

        {{/hasProduces}}
        {{#hasConsumes}}
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            [{{#consumes}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/consumes}}])  # noqa: E501

        {{/hasConsumes}}
        # Authentication setting
        auth_settings = [{{#authMethods}}'{{name}}'{{#hasMore}}, {{/hasMore}}{{/authMethods}}] # noqa: E501

        return self.api_client.call_api(
            path, '{{httpMethod}}',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type={{#returnType}}'{{returnType}}'{{/returnType}}{{^returnType}}None{{/returnType}},  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
{{/operation}}

    # Helper method to convert first letter to downcase
    def __downcase_first_letter(self, s):
        if len(s) == 0:
            return s
        else:
            return s[0].lower() + s[1:]

    def __request_token(self):
        config = self.api_client.configuration
        request_url = "/connect/token"
        form_params = [('grant_type', 'client_credentials'), ('client_id', config.api_key['app_sid']),
                       ('client_secret', config.api_key['api_key'])]

        header_params = {'Accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded'}

        api_version = self.api_client.configuration.api_version
        self.api_client.configuration.api_version = ''

        data = self.api_client.call_api(request_url, 'POST',
                                        {},
                                        [],
                                        header_params,
                                        post_params=form_params,
                                        response_type='object',
                                        files={}, _return_http_data_only=True)
        access_token = data['access_token'] if six.PY3 else data['access_token'].encode('utf8')
        self.api_client.configuration.access_token = access_token

        self.api_client.configuration.api_version = api_version

{{/operations}}
{{> requestModel}}
