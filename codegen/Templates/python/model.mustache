#  coding: utf-8
#  ----------------------------------------------------------------------------
#  <copyright company="Aspose" file="{{classname}}.py">
#    Copyright (c) 2018-2019 Aspose Pty Ltd. All rights reserved.
#  </copyright>
#  <summary>
#    Permission is hereby granted, free of charge, to any person obtaining a
#   copy  of this software and associated documentation files (the "Software"),
#   to deal  in the Software without restriction, including without limitation
#   the rights  to use, copy, modify, merge, publish, distribute, sublicense,
#   and/or sell  copies of the Software, and to permit persons to whom the
#   Software is  furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included in
#   all  copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#   FROM,  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#   DEALINGS IN THE SOFTWARE.
#  </summary>
#  ----------------------------------------------------------------------------

import pprint
import re
import six
{{#imports}}{{#-first}}
{{/-first}}
{{import}}
{{/imports}}


{{#models}}
{{#model}}
class {{classname}}({{#parent}}{{parent}}{{/parent}}{{^parent}}object{{/parent}}):
    """{{description}}
    """{{#allowableValues}}

    """
    allowed enum values
    """
{{#enumVars}}
    {{name}} = {{{value}}}{{^-last}}
{{/-last}}
{{/enumVars}}{{/allowableValues}}

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
{{#vars}}
        '{{name}}': '{{{datatype}}}'{{#hasMore}},{{/hasMore}}
{{/vars}}
    }

    attribute_map = {
{{#vars}}
        '{{name}}': '{{baseName}}'{{#hasMore}},{{/hasMore}}
{{/vars}}
    }
{{#discriminator}}

    discriminator_value_class_map = {
        {{#children}}'{{^vendorExtensions.x-discriminator-value}}{{name}}{{/vendorExtensions.x-discriminator-value}}{{#vendorExtensions.x-discriminator-value}}{{{vendorExtensions.x-discriminator-value}}}{{/vendorExtensions.x-discriminator-value}}': '{{{classname}}}'{{^-last}},
        {{/-last}}{{/children}}
    }
{{/discriminator}}

    def __init__(self{{#vars}}, {{name}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{/vars}}):
        """{{classname}} - a model defined in Swagger"""
        super({{classname}}, self).__init__()
{{#vars}}{{#-first}}
{{/-first}}
        self._{{name}} = None
{{/vars}}{{#vars}}{{#-first}}
{{/-first}}
        if {{name}} is not None:
            self.{{name}} = {{name}}
{{/vars}}

{{#vars}}
    @property
    def {{name}}(self):
        """Gets the {{name}} of this {{classname}}.

{{#description}}
        {{{description}}}
{{/description}}

        :return: The {{name}} of this {{classname}}.
        :rtype: {{datatype}}
        """
        return self._{{name}}

    @{{name}}.setter
    def {{name}}(self, {{name}}):
        """Sets the {{name}} of this {{classname}}.

{{#description}}
        {{{description}}}
{{/description}}

        :param {{name}}: The {{name}} of this {{classname}}.
        :type: {{datatype}}
        """
{{#required}}
        if {{name}} is None:
            raise ValueError("Invalid value for `{{name}}`, must not be `None`")
{{/required}}
{{#isEnum}}
{{#isContainer}}
        allowed_values = [{{#allowableValues}}{{#values}}{{#items.isString}}"{{/items.isString}}{{{this}}}{{#items.isString}}"{{/items.isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]
{{#isListContainer}}
        if not set({{{name}}}).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `{{{name}}}` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set({{{name}}}) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )
{{/isListContainer}}
{{#isMapContainer}}
        if not set({{{name}}}.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `{{{name}}}` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set({{{name}}}.keys()) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )
{{/isMapContainer}}
{{/isContainer}}
{{^isContainer}}
        allowed_values = [{{#allowableValues}}{{#values}}{{#isString}}"{{/isString}}{{{this}}}{{#isString}}"{{/isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]
        if not {{{name}}}.isdigit():
            if {{{name}}} not in allowed_values:
                raise ValueError(
                    "Invalid value for `{{{name}}}` ({0}), must be one of {1}"
                    .format({{{name}}}, allowed_values))
            self._{{name}} = {{name}}
        else:
            self._{{name}} = allowed_values[int({{name}}) if six.PY3 else long({{name}})]

{{/isContainer}}
{{/isEnum}}
{{^isEnum}}
{{#hasValidation}}
{{#maxLength}}
        if {{name}} is not None and len({{name}}) > {{maxLength}}:
            raise ValueError("Invalid value for `{{name}}`, length must be less than or equal to `{{maxLength}}`")
{{/maxLength}}
{{#minLength}}
        if {{name}} is not None and len({{name}}) < {{minLength}}:
            raise ValueError("Invalid value for `{{name}}`, length must be greater than or equal to `{{minLength}}`")
{{/minLength}}
{{#maximum}}
        if {{name}} is not None and {{name}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}:
            raise ValueError("Invalid value for `{{name}}`, must be a value less than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}`{{maximum}}`")
{{/maximum}}
{{#minimum}}
        if {{name}} is not None and {{name}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}:
            raise ValueError("Invalid value for `{{name}}`, must be a value greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}`{{minimum}}`")
{{/minimum}}
{{#pattern}}
        if {{name}} is not None and not re.search('{{{vendorExtensions.x-regex}}}', {{name}}{{#vendorExtensions.x-modifiers}}{{#-first}}, flags={{/-first}}re.{{.}}{{^-last}} | {{/-last}}{{/vendorExtensions.x-modifiers}}):
            raise ValueError("Invalid value for `{{name}}`, must be a follow pattern or equal to `{{{pattern}}}`")
{{/pattern}}
{{#maxItems}}
        if {{name}} is not None and len({{name}}) > {{maxItems}}:
            raise ValueError("Invalid value for `{{name}}`, number of items must be less than or equal to `{{maxItems}}`")
{{/maxItems}}
{{#minItems}}
        if {{name}} is not None and len({{name}}) < {{minItems}}:
            raise ValueError("Invalid value for `{{name}}`, number of items must be greater than or equal to `{{minItems}}`")
{{/minItems}}
{{/hasValidation}}
{{/isEnum}}
{{^isEnum}}
        self._{{name}} = {{name}}

{{/isEnum}}
{{/vars}}
{{#discriminator}}
    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data.get(self.discriminator)
        return self.discriminator_value_class_map.get(discriminator_value.lower()) if discriminator_value else None

{{/discriminator}}
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, {{classname}}):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
{{/model}}
{{/models}}
