<?php
/**
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose" file="ImagingApi.php">
 *   Copyright (c) 2019 Aspose Pty Ltd. All rights reserved.
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */

namespace {{invokerPackage}};

use \GuzzleHttp\Client;
use \GuzzleHttp\Exception\RequestException;
use \GuzzleHttp\Psr7\MultipartStream;
use \GuzzleHttp\Psr7\Request;
use \GuzzleHttp\RequestOptions;
use \{{invokerPackage}}\ObjectSerializer;

/**
 * Aspose.Imaging Cloud APIs.
 */
class {{classname}}
{
    /**
     * Stores client instance
     *
     * @var \GuzzleHttp\ClientInterface client for calling the API
     */
    private $client;

    /**
     * Stores configuration
     *
     * @var \Aspose\Imaging\Configuration Configuration info
     */
    private $configuration;
  
    /**
     * Initialize a new instance of ImagingApi
     *
     * @param \Aspose\Imaging\Configuration   $config Configuration info
     * @param \GuzzleHttp\ClientInterface   $client PSR-7 compliant HTTP client
     */
    public function __construct($config = null, $client = null)
    {
        $this->client = $client ?: new Client();
        $this->configuration = $config ?: new Configuration();
        $execTime = (int)ini_get('max_execution_time');
        if ($execTime > 0 && $execTime < 500)
        {
            set_time_limit(500);
        }

        $this->requestToken();
    }

    /**
     * Gets the configuration.
     * @return \Aspose\Imaging\Configuration
     */
    public function getConfig() 
    {
        return $this->configuration;
    }
    
{{#operations}}
{{#operation}}
    /**
{{#summary}}
     * {{{summary}}}
{{/summary}}
     *
{{#description}}
     * {{.}}
     *
{{/description}}
     * @param \Aspose\Imaging\Model\Requests\{{vendorExtensions.x-operationId}}Request $request Request object for operation
     *
     * @throws \{{invokerPackage}}\ApiException Throws on non-2xx response
     * @throws \InvalidArgumentException
     * @return {{#returnType}}{{#vendorExtensions}}{{#x-binary-result}}\Psr\Http\Message\StreamInterface{{/x-binary-result}}{{^x-binary-result}}{{{returnType}}}{{/x-binary-result}}{{/vendorExtensions}}{{/returnType}}{{^returnType}}void{{/returnType}}
     */
    public function {{operationId}}($request)
    {
        $returnType = '{{returnType}}';
        $isBinary = {{#vendorExtensions}}{{#x-binary-result}}true{{/x-binary-result}}{{/vendorExtensions}}{{#vendorExtensions}}{{^x-binary-result}}false{{/x-binary-result}}{{/vendorExtensions}};
        $hasReturnType = {{#returnType}}true{{/returnType}}{{^returnType}}false{{/returnType}};
        $request = $this->getHttpRequest($request, '{{httpMethod}}');
        $options = $this->createHttpClientOptions();
            
        try {
            $response = $this->client->send($request, $options);
            return $this->processResponse($request, $response, $hasReturnType, $returnType, $isBinary);
        } catch (RequestException $e) {
            $this->processException($e);
        }
    }

    /**
{{#summary}}
     * {{{summary}}}
     * Performs operation asynchronously.
{{/summary}}
     *
{{#description}}
     * {{.}}
     *
{{/description}}
     * @param \Aspose\Imaging\Model\Requests\{{vendorExtensions.x-operationId}}Request $request Request object for operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function {{operationId}}Async($request) 
    {
        $returnType = '{{returnType}}';
        $isBinary = {{#vendorExtensions}}{{#x-binary-result}}true{{/x-binary-result}}{{/vendorExtensions}}{{#vendorExtensions}}{{^x-binary-result}}false{{/x-binary-result}}{{/vendorExtensions}};
        $hasReturnType = {{#returnType}}true{{/returnType}}{{^returnType}}false{{/returnType}};
        $request = $this->getHttpRequest($request, '{{httpMethod}}');
        $options = $this->createHttpClientOptions();

        return $this->client
            ->sendAsync($request, $options)
            ->then(
                function ($response) use ($request, $hasReturnType, $returnType, $isBinary) {
                    return $this->processResponse($request, $response, $hasReturnType, $returnType, $isBinary);
                },
                function ($exception) use ($request) {
                    $this->processException($exception);
                }
            );
    }
    
    {{/operation}}
    {{/operations}}
    /**
     * Prepares HTTP request for Imaging API operation
     *
     * @param \Aspose\Imaging\Model\Requests\ImagingRequest $request Imaging request object for operation
     * @param string $httpMethod HTTP request method
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function getHttpRequest($imagingRequest, $httpMethod)
    {
        $initialInfo = $imagingRequest->getHttpRequestInfo($this->configuration);
        $resourcePath = $initialInfo['resourcePath'];
        $formParams = $initialInfo['formParams'];
        $queryParams = $initialInfo['queryParams'];
        $headerParams = $initialInfo['headerParams'];
        $headers = $initialInfo['headers'];
        $initialHttpBody = $initialInfo['httpBody'];
        $httpBody = '';

        // for model (json/xml)
        if (isset($initialHttpBody)) {
            $httpBody = $initialHttpBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            $multipartContents = [];
            foreach ($formParams as $formParamName => $formParamValue) {
                $multipartContents[] = [
                    'name' => $formParamName,
                    'contents' => $formParamValue,
                    'filename' => $formParamName,
                    'headers' => [
                        'Content-Type' => 'application/octet-stream',
                        'Content-Length' => strlen($formParamValue)
                    ]
                ];
            }
            
            $boundary = sha1(uniqid('', true));
            $headers['Content-Type'] = "multipart/form-data; boundary=" . $boundary;
            $httpBody = new MultipartStream($multipartContents, $boundary);
        }
        
        if ($this->configuration->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->configuration->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->configuration->getUserAgent()) {
            $defaultHeaders['x-aspose-client'] = $this->configuration->getUserAgent();
        }
    
        $defaultHeaders['x-aspose-client-version'] = $this->configuration->getClientVersion();

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
    
        $req = new Request(
            $httpMethod,
            $this->configuration->getApiBaseUrl() . "/" . $resourcePath,
            $headers,
            $httpBody
        );
        if ($this->configuration->getDebug()) {
            $this->writeRequestLog($httpMethod, $this->configuration->getApiBaseUrl() . "/" . $resourcePath, $headers, $httpBody);
        }
        
        return $req;
    }
    
    /**
     * Processes Imaging API response
     *
     * @param \GuzzleHttp\Psr7\Request $request Imaging operation request
     * @param \Psr\Http\Message\ResponseInterface $response Imaging operation response
     * @param bool $hasReturnType If response has a return type
     * @param string $returnType Return type of response
     * @param bool $isBinary If response should be binary
     *
     * @throws \Aspose\Imaging\ApiException
     * @return mixed
     */
    private function processResponse($request, $response, $hasReturnType, $returnType, $isBinary)
    {
        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            $body = $response->getBody();
            $error = null;
            if (isset($body)) {
                try {
                    $error = ObjectSerializer::deserialize($body->getContents(), '\Aspose\Imaging\Model\Error', []);
                } catch (\Throwable $th) {
                    // suppress exception
                }
            }

            throw new ApiException(
                sprintf('[%d] Error connecting to the API (%s); Body: (%s)', $statusCode, $request->getUri(), $response->getBody()), $statusCode, $error
            );
        }
        
        $result = null;

        if ($hasReturnType)
        {
            $responseBody = $response->getBody();
            if ($isBinary) {
                return $responseBody;
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }
            
            $result = ObjectSerializer::deserialize($content, $returnType, []);
            
            if ($this->configuration->getDebug()) {
                $this->writeResponseLog($statusCode, $response->getHeaders(), $result);
            }
        }
        
        return $result;
    }
    
    /**
     * Processes the exception caught during request execution
     *
     * @param \GuzzleHttp\Exception\RequestException $exception The initial exception
     *
     * @throws \Aspose\Imaging\ApiException
     */
    private function processException($exception)
    {
        $response = $exception->getResponse();
        $statusCode = isset($response) ? $response->getStatusCode() : null;

        throw new ApiException(
            sprintf('[%d] Error connecting to the API (%s); Message: (%s)', $statusCode, $exception->getRequest()->getUri(), $exception->getMessage()), $statusCode
        );
    }
    
    /**
     * Create http client options
     *
     * @throws \RuntimeException Throws on file opening failure
     * @return array HTTP client options
     */
    private function createHttpClientOptions() 
    {
        $options = [];
        if ($this->configuration->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->configuration->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->configuration->getDebugFile());
            }
        }
        
        $options[RequestOptions::TIMEOUT] = 1200;
        return $options;
    }
    
    /**
     * Executes response logging
     */
    private function writeResponseLog($statusCode, $headers, $body)
    {
        $logInfo = "\nResponse: $statusCode \n";
        echo $logInfo . $this->writeHeadersAndBody($logInfo, $headers, $body);
    }
    
    /**
     * Executes request logging
     */
    private function writeRequestLog($method, $url, $headers, $body)
    {
        $logInfo = "\n$method: $url \n";
        echo $logInfo . $this->writeHeadersAndBody($logInfo, $headers, $body);
    }
    
    /**
     * Executes header and boy formatting
     */
    private function writeHeadersAndBody($logInfo, $headers, $body)
    {
        foreach ($headers as $name => $value) {
            $logInfo .= $name . ': ' . $value . "\n";
        }
        
        return $logInfo .= "Body: " . $body . "\n";
    }
  
    /**
     * Gets a request token from server
     */
    private function requestToken() 
    {
        $requestUrl = $this->configuration->getBaseUrl() . "connect/token";
        $postData = "grant_type=client_credentials" . "&client_id=" . $this->configuration->getAppSid() . "&client_secret=" . $this->configuration->getAppKey();
        $headers = [];
        $headers['Content-Type'] = "application/x-www-form-urlencoded";
        $headers['Content-Length'] = strlen($postData);
        $response = $this->client->send(new Request('POST', $requestUrl, $headers, $postData));
        $result = json_decode($response->getBody()->getContents(), true);
        $this->configuration->setAccessToken($result["access_token"]);
    }
}
{{>requestModel}}