{{#operations}}
{{#operation}}
<?php
/**
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose" file="{{vendorExtensions.x-operationId}}Request.php">
 *   Copyright (c) 2018-2019 Aspose Pty Ltd. All rights reserved.
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */

namespace {{modelPackage}}\Requests;

use \InvalidArgumentException;
use \{{invokerPackage}}\Configuration;
use \{{invokerPackage}}\ObjectSerializer;
use \{{modelPackage}}\Requests\ImagingRequest;

/**
 * Request model for {{nickname}} operation.
 */
class {{vendorExtensions.x-operationId}}Request extends ImagingRequest
{
    {{#hasParams}}
    {{#allParams}}                
    /**
     * {{^description}}Gets or sets {{paramName}}{{/description}}{{#description}}{{{description}}}{{/description}}
     *
     * @var {{#isFile}}string{{/isFile}}{{^isFile}}{{dataType}}{{/isFile}}
     */
    public ${{paramName}};
    {{#hasMore}}
    
    {{/hasMore}}
    {{/allParams}}
    
    /**
     * Initializes a new instance of the {{vendorExtensions.x-operationId}}Request class.
     *  
     {{#allParams}}
     * @param {{#isFile}}string{{/isFile}}{{^isFile}}{{dataType}}{{/isFile}} ${{paramName}} {{#description}}{{{description}}}{{/description}}
     {{/allParams}}
     */
    public function __construct({{#allParams}}${{paramName}}{{^required}} = null{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})             
    {
        {{#allParams}}
        $this->{{paramName}} = ${{paramName}};
        {{/allParams}}   
    }

    {{#allParams}}                
    /**
     * {{^description}}Gets {{paramName}}{{/description}}{{#description}}{{{description}}}{{/description}}
     *
     * @return {{#isFile}}string{{/isFile}}{{^isFile}}{{dataType}}{{/isFile}}
     */
    public function get_{{paramName}}()
    {
        return $this->{{paramName}};
    }

    /**
     * {{^description}}Sets {{paramName}}{{/description}}{{#description}}{{{description}}}{{/description}}
     *
     * @return \{{modelPackage}}\Requests\{{vendorExtensions.x-operationId}}Request
     */
    public function set_{{paramName}}($value)
    {
        $this->{{paramName}} = $value;
        return $this;
    }
    {{#hasMore}}
    
    {{/hasMore}}
    {{/allParams}}
    {{/hasParams}}

    /**
     * Prepares initial info for HTTP request
     *
     * @param \{{invokerPackage}}\Configuration $config Imaging API configuration.
     */
    public function getHttpRequestInfo($config)
    {
        {{#allParams}}
        {{#required}}
        // verify the required parameter '{{paramName}}' is set
        if ($this->{{paramName}} === null) {
            throw new \InvalidArgumentException('Missing the required parameter ${{paramName}} when calling {{operationId}}');
        }
        {{/required}}
        {{#hasValidation}}
        {{#maxLength}}
        if ({{^required}}$this->{{paramName}} !== null && {{/required}}strlen($this->{{paramName}}) > {{maxLength}}) {
            throw new \InvalidArgumentException('invalid length for "$this->{{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.');
        }
        {{/maxLength}}
        {{#minLength}}
        if ({{^required}}$this->{{paramName}} !== null && {{/required}}strlen($this->{{paramName}}) < {{minLength}}) {
            throw new \InvalidArgumentException('invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.');
        }
        {{/minLength}}
        {{#maximum}}
        if ({{^required}}$this->{{paramName}} !== null && {{/required}}$this->{{paramName}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.');
        }
        {{/maximum}}
        {{#minimum}}
        if ({{^required}}$this->{{paramName}} !== null && {{/required}}$this->{{paramName}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.');
        }
        {{/minimum}}
        {{#pattern}}
        if ({{^required}}$this->{{paramName}} !== null && {{/required}}!preg_match("{{{pattern}}}", $this->{{paramName}})) {
            throw new \InvalidArgumentException("invalid value for \"{{paramName}}\" when calling {{classname}}.{{operationId}}, must conform to the pattern {{{pattern}}}.");
        }
        {{/pattern}}
        {{#maxItems}}
        if ({{^required}}${{paramName}} !== null && {{/required}}count(${{paramName}}) > {{maxItems}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{maxItems}}.');
        }
        {{/maxItems}}
        {{#minItems}}
        if ({{^required}}$this->{{paramName}} !== null && {{/required}}count($this->{{paramName}}) < {{minItems}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{minItems}}.');
        }
        {{/minItems}}

        {{/hasValidation}}
        {{/allParams}}

        $resourcePath = '{{path}}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $headers = [];
    
    {{#pathParams}}
        // path params
        {{#collectionFormat}}
        if (is_array($this->{{paramName}})) {
            $this->{{paramName}} = ObjectSerializer::serializeCollection($this->{{paramName}}, '{{collectionFormat}}');
        }
        {{/collectionFormat}}
        if ($this->{{paramName}} !== null) {
            $localName = lcfirst('{{baseName}}');
            $resourcePath = str_replace('{' . $localName . '}', ObjectSerializer::toPathValue($this->{{paramName}}), $resourcePath);
        }
        {{/pathParams}}

        {{#queryParams}}
        // query params
        {{#collectionFormat}}
        if (is_array($this->{{paramName}})) {
            $this->{{paramName}} = ObjectSerializer::serializeCollection($this->{{paramName}}, '{{collectionFormat}}', true);
        }
        {{/collectionFormat}}
        if ($this->{{paramName}} !== null) {
            $localName = lcfirst('{{baseName}}');
            $localValue = is_bool($this->{{paramName}}) ? ($this->{{paramName}} ? 'true' : 'false') : $this->{{paramName}};
            if (strpos($resourcePath, '{' . $localName . '}') !== false) {
                $resourcePath = str_replace('{' . $localName . '}', ObjectSerializer::toPathValue($localValue), $resourcePath);
            } else {
                $queryParams[$localName] = ObjectSerializer::toQueryValue($localValue);
            }
        }
        {{/queryParams}}
    
        {{#headerParams}}
        // header params
        {{#collectionFormat}}
        if (is_array($this->{{paramName}})) {
            $this->{{paramName}} = ObjectSerializer::serializeCollection($this->{{paramName}}, '{{collectionFormat}}');
        }
        {{/collectionFormat}}
        if ($this->{{paramName}} !== null) {
            $headerParams['{{paramName}}'] = ObjectSerializer::toHeaderValue($this->{{paramName}});
        }
        {{/headerParams}}
    
        $resourcePath = trim($resourcePath, "/") . "?" . http_build_query($queryParams);

        {{#formParams}}
        // form params
        if ($this->{{paramName}} !== null) {
            $formParams[ObjectSerializer::toStandardName('{{paramName}}')] = ObjectSerializer::toFormValue($this->{{paramName}});
        }
        {{/formParams}}
        // body params
        $httpBody = null;
        {{#bodyParams}}
        if (isset($this->{{paramName}})) {
            if (is_string($this->{{paramName}})) {
                $httpBody = "\"" . $this->{{paramName}} . "\"";   
            } else {
                $httpBody = $this->{{paramName}};
            }
        }
        {{/bodyParams}}
        
        $httpInfo = array(
            "resourcePath" => $resourcePath,
            "queryParams" => $queryParams,
            "headerParams" => $headerParams,
            "headers" => $headers,
            "httpBody" => $httpBody,
            "formParams" => $formParams,
        );
        
        return $httpInfo;        
    }
}
{{/operation}}
{{/operations}}